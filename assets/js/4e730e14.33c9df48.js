"use strict";(self.webpackChunknazake=self.webpackChunknazake||[]).push([[2538],{1236:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"gameplay-interaction/setup","title":"Setup","description":"Downloading and Locating the Gameplay Interaction Plugin","source":"@site/docs/gameplay-interaction/setup.md","sourceDirName":"gameplay-interaction","slug":"/gameplay-interaction/setup","permalink":"/imnazake/docs/gameplay-interaction/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gameplay-interaction/setup.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Roadmap","permalink":"/imnazake/docs/gameplay-interaction/roadmap"},"next":{"title":"Creating New Interactive Entities","permalink":"/imnazake/docs/gameplay-interaction/creating-new-interactive-entities"}}');var r=e(4848),a=e(8453);const l={sidebar_position:3},o="Setup",s={},c=[{value:"Downloading and Locating the Gameplay Interaction Plugin",id:"downloading-and-locating-the-gameplay-interaction-plugin",level:3},{value:"Step 1: Download the Plugin",id:"step-1-download-the-plugin",level:2},{value:"Step 2: Locate the Plugin",id:"step-2-locate-the-plugin",level:2},{value:"Step 3: Copy the Plugin to Your Project",id:"step-3-copy-the-plugin-to-your-project",level:2},{value:"Step 4: Enable the Plugin in the Editor",id:"step-4-enable-the-plugin-in-the-editor",level:2},{value:"Step 5: Open the Project in Your IDE",id:"step-5-open-the-project-in-your-ide",level:2},{value:"Step 6: Integrating with Your Project",id:"step-6-integrating-with-your-project",level:2},{value:"Step 7: Interactable Actor Example",id:"step-7-interactable-actor-example",level:2},{value:"Step 8: Setting up collision settings in engine",id:"step-8-setting-up-collision-settings-in-engine",level:2},{value:"Step 9: Setting up a custom ability system component and binding inputs for gameplay abilities",id:"step-9-setting-up-a-custom-ability-system-component-and-binding-inputs-for-gameplay-abilities",level:2},{value:"Step 10: Setting up interaction and interactive entities for testing",id:"step-10-setting-up-interaction-and-interactive-entities-for-testing",level:2},{value:"Step 11: Place an Interactive Entity in the Level for Testing",id:"step-11-place-an-interactive-entity-in-the-level-for-testing",level:2}];function p(t){const n={admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setup",children:"Setup"})}),"\n",(0,r.jsx)(n.h3,{id:"downloading-and-locating-the-gameplay-interaction-plugin",children:"Downloading and Locating the Gameplay Interaction Plugin"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-1-download-the-plugin",children:"Step 1: Download the Plugin"}),"\n",(0,r.jsxs)(n.p,{children:["Download the ",(0,r.jsx)(n.strong,{children:"Gameplay Interaction"})," plugin from the ",(0,r.jsx)(n.strong,{children:"Epic Games Launcher"})," for the version of Unreal Engine you are using (5.1 and above)."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-2-locate-the-plugin",children:"Step 2: Locate the Plugin"}),"\n",(0,r.jsxs)(n.p,{children:["After downloading, you can find the plugin in the following directory:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"{EngineDirectory}/Plugins/Marketplace/GameplayInteraction"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Setup",src:e(7814).A+"",width:"974",height:"270"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-copy-the-plugin-to-your-project",children:"Step 3: Copy the Plugin to Your Project"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Close your Unreal project and any open IDEs."}),"\n",(0,r.jsxs)(n.li,{children:["Copy the ",(0,r.jsx)(n.strong,{children:"GameplayInteraction"})," plugin folder from the directory above and paste it inside your project's ",(0,r.jsx)(n.strong,{children:"Plugins"})," folder."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.strong,{children:"Plugins"})," folder doesn\u2019t exist in your project directory, create it manually."]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Setup",src:e(9021).A+"",width:"922",height:"757"}),"\r\n",(0,r.jsx)(n.img,{alt:"Setup",src:e(7892).A+"",width:"814",height:"458"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Right-click your ",(0,r.jsx)(n.code,{children:".uproject"})," file and select ",(0,r.jsx)(n.code,{children:"Generate Visual Studio project files"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-4-enable-the-plugin-in-the-editor",children:"Step 4: Enable the Plugin in the Editor"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open your project in ",(0,r.jsx)(n.strong,{children:"Unreal Editor"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Navigate to ",(0,r.jsx)(n.strong,{children:"Edit > Plugins > Gameplay category"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Enable the ",(0,r.jsx)(n.strong,{children:"Gameplay Interaction"})," plugin."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Setup",src:e(7803).A+"",width:"1648",height:"354"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Ensure the following dependencies are also enabled:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Gameplay Abilities"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Enhanced Input"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Common UI"})}),"\n"]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-5-open-the-project-in-your-ide",children:"Step 5: Open the Project in Your IDE"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If you\u2019re working on a ",(0,r.jsx)(n.strong,{children:"Blueprint-only"})," project, create an empty C++ class to convert it into a C++ project."]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open your project's ",(0,r.jsx)(n.code,{children:".Build.cs"})," file (",(0,r.jsx)(n.code,{children:"Source/YourProject/YourProject.Build.cs"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Add the following modules to your dependencies:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'PublicDependencyModuleNames.AddRange(new string[]\r\n{\r\n    "Core",\r\n    "CoreUObject",\r\n    "Engine",\r\n    "InputCore",\r\n\r\n    "GameplayAbilities",\r\n    "GameplayTags",\r\n    "EnhancedInput",\r\n    "CommonUI",\r\n\r\n    "GameplayInteraction"\r\n});\r\n\r\nPrivateDependencyModuleNames.AddRange(new string[]\r\n{\r\n    "UMG",\r\n    "Slate",\r\n    "SlateCore"\r\n});\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Save the file."}),"\n",(0,r.jsx)(n.li,{children:"Regenerate Visual Studio project files again."}),"\n",(0,r.jsx)(n.li,{children:"Reopen the project in your IDE."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-6-integrating-with-your-project",children:"Step 6: Integrating with Your Project"}),"\n",(0,r.jsxs)(n.p,{children:["This step assumes you have a ",(0,r.jsx)(n.code,{children:"Character"}),", ",(0,r.jsx)(n.code,{children:"PlayerController"}),", and ",(0,r.jsx)(n.code,{children:"PlayerState"})," class already set up."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PlayerState Setup"})}),"\n",(0,r.jsxs)(n.p,{children:["Create or modify your ",(0,r.jsx)(n.code,{children:"PlayerState"})," class to implement ",(0,r.jsx)(n.code,{children:"IAbilitySystemInterface"})," and hold an ",(0,r.jsx)(n.code,{children:"AbilitySystemComponent"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"UCLASS()\r\nclass MYPROJECT_API AMyPlayerState : public APlayerState, public IAbilitySystemInterface\r\n{\r\n    GENERATED_BODY()\r\n\r\npublic:\r\n    AMyPlayerState();\r\n\r\n    virtual UAbilitySystemComponent* GetAbilitySystemComponent() const override;\r\n\r\nprotected:\r\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\r\n    TObjectPtr<UAbilitySystemComponent> AbilitySystemComponent;\r\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PlayerController Setup"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, integrate the ",(0,r.jsx)(n.code,{children:"UGameplayInteractionComponent"}),", and optionally other GAS-related systems."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"UGameplayInteractionComponent"})," is now a controller component which should be only added to controllers such as APlayerController class."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'UCLASS()\r\nclass MYPROJECT_API AMyPlayerController : public APlayerController, public IAbilitySystemInterface, public IGameplayInteractionInterface\r\n{\r\n    GENERATED_BODY()\r\n\r\npublic:\r\n\r\n    AMyPlayerController(const FObjectInitializer& ObjectInitializer);\r\n\r\n    virtual UAbilitySystemComponent* GetAbilitySystemComponent() const override;\r\n\r\n    UFUNCTION(BlueprintPure, Category = "Interaction")\r\n    virtual UGameplayInteractionComponent* GetInteractionComponent() override;\r\n\r\n    virtual void OnPossess(APawn* InPawn) override;\r\n    virtual void OnRep_PlayerState() override;\r\n\r\nprotected:\r\n\r\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Interaction")\r\n    TObjectPtr<UGameplayInteractionComponent> InteractionComponent;\r\n\r\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'AMyPlayerController::AMyPlayerController(const FObjectInitializer& ObjectInitializer)\r\n    : Super(ObjectInitializer)\r\n{\r\n    InteractionComponent = CreateDefaultSubobject<UGameplayInteractionComponent>(TEXT("InteractionComponent"));\r\n    InteractionComponent->SetIsReplicated(true);\r\n}\r\n\r\nUAbilitySystemComponent* AMyPlayerController::GetAbilitySystemComponent() const\r\n{\r\n    if (const AMyPlayerState* PS = GetPlayerState<AMyPlayerState>())\r\n    {\r\n        return PS->GetAbilitySystemComponent();\r\n    }\r\n\r\n    return nullptr;\r\n}\r\n\r\nUGameplayInteractionComponent* AMyPlayerController::GetInteractionComponent() const\r\n{\r\n    return InteractionComponent;\r\n}\r\n\r\nvoid AMyPlayerController::OnPossess(APawn* InPawn)\r\n{\r\n    Super::OnPossess(InPawn);\r\n\r\n    if (AMyPlayerState* PS = GetPlayerState<AMyPlayerState>())\r\n    {\r\n        InteractionComponent->RegisterAbilitySystemComponent(PS->GetAbilitySystemComponent());\r\n    }\r\n}\r\n\r\nvoid AMyPlayerController::OnRep_PlayerState()\r\n{\r\n    Super::OnRep_PlayerState();\r\n\r\n    if (AMyPlayerState* PS = GetPlayerState<AMyPlayerState>())\r\n    {\r\n        InteractionComponent->RegisterWithAbilitySystem(PS->GetAbilitySystemComponent());\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-7-interactable-actor-example",children:"Step 7: Interactable Actor Example"}),"\n",(0,r.jsx)(n.p,{children:"To make an actor interactable, implement the appropriate interface and component setup."}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["You can either make your actor inherit from ",(0,r.jsx)(n.code,{children:"AInteractiveEntity"})," or create/use your own custom actor class that should implement the following interfaces:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"IGameplayInteractiveEntityInterface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"IOutlineDrawingEntityInterface"})}),"\n"]}),(0,r.jsxs)(n.p,{children:["you can check the ",(0,r.jsx)(n.code,{children:"AInteractiveEntity"})," class to see how to implement them in your own actor class."]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"UCLASS(Blueprintable, BlueprintType)\r\nclass YOURPROJECT_API AMyInteractableActor : public AActor, public IOutlineDrawingEntityInterface, public IGameplayInteractiveEntityInterface\r\n{\r\n    GENERATED_BODY()\r\n\r\n    // @see AInteractiveEntity actor class in the plugin source code for example implementation\r\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-8-setting-up-collision-settings-in-engine",children:"Step 8: Setting up collision settings in engine"}),"\n",(0,r.jsx)(n.p,{children:"After compiling the project and launching the unreal editor from IDE or manually."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When you open the unreal engine editor, go to ",(0,r.jsx)(n.code,{children:"Project Settings > Collision"})," and make sure you add the collision presets in the pictures below."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Setup",src:e(7298).A+"",width:"1541",height:"500"}),"\r\n",(0,r.jsx)(n.img,{alt:"Setup",src:e(233).A+"",width:"1363",height:"480"}),"\r\n",(0,r.jsx)(n.img,{alt:"Setup",src:e(3984).A+"",width:"1539",height:"558"}),"\r\n",(0,r.jsx)(n.img,{alt:"Setup",src:e(343).A+"",width:"1170",height:"604"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Now for the outline feature to work when looking at interactive entities you will need to add a ",(0,r.jsx)(n.code,{children:"PostProcessVolume"})," to your level, make it infinite extent (unbound)\r\nand add a post process material then select ",(0,r.jsx)(n.code,{children:"MI_Outline_White"})," material from the ",(0,r.jsx)(n.code,{children:"GameplayInteraction"})," plugin"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If you dont see the plugin content or you cannot select plugin related content, make sure to click on the settings button in your ",(0,r.jsx)(n.code,{children:"ContentBrowser"})," the settings button\r\nis top-right side of the screen, then make sure ",(0,r.jsx)(n.code,{children:"Show Plugin Content"})," is checked or enabled to be able to see plugin content in your project."]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Setup",src:e(846).A+"",width:"1404",height:"819"}),"\r\n",(0,r.jsx)(n.img,{alt:"Setup",src:e(228).A+"",width:"1179",height:"367"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-9-setting-up-a-custom-ability-system-component-and-binding-inputs-for-gameplay-abilities",children:"Step 9: Setting up a custom ability system component and binding inputs for gameplay abilities"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["To do this step, you need to open the project source code in your IDE while the editor is closed.",(0,r.jsx)(n.br,{}),"\n","If your project is currently Blueprint-only, you must create an empty C++ class from the editor first to convert your project into a C++ project.",(0,r.jsx)(n.br,{}),"\n","After that, you can open your IDE and proceed with this step."]})}),"\n",(0,r.jsx)(n.p,{children:"To enable your abilities and the ability system to handle input from gameplay tags (also known as input tags) and support wait input tasks, you need to implement several key functions within your custom Ability System Component."}),"\n",(0,r.jsx)(n.p,{children:"These functions allow your component to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Process input events based on gameplay tags."}),"\n",(0,r.jsx)(n.li,{children:"Track pressed, held, and released input states."}),"\n",(0,r.jsx)(n.li,{children:"Activate abilities according to their input activation policies."}),"\n",(0,r.jsx)(n.li,{children:"Support ability input lifecycle management (press, hold, release)."}),"\n",(0,r.jsx)(n.li,{children:"Integrate with gameplay ability tasks that wait for input events."}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbilitySystem.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#pragma once\r\n\r\n#include "CoreMinimal.h"\r\n#include "AbilitySystemComponent.h"\r\n#include "UnifyAbilitySystemComponent.generated.h"\r\n\r\nUCLASS()\r\nclass UNIFY_API UUnifyAbilitySystemComponent : public UAbilitySystemComponent\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tvirtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;\r\n\tvirtual void InitAbilityActorInfo(AActor* InOwnerActor, AActor* InAvatarActor) override;\r\n\r\n\tvoid AbilityInputTagPressed(const FGameplayTag& InputTag);\r\n\tvoid AbilityInputTagReleased(const FGameplayTag& InputTag);\r\n\r\n\tvoid ProcessAbilityInput(float DeltaTime, bool bGamePaused);\r\n\tvoid ClearAbilityInput();\r\n\r\n\tvoid GetAbilityTargetData(const FGameplayAbilitySpecHandle AbilityHandle, FGameplayAbilityActivationInfo ActivationInfo, FGameplayAbilityTargetDataHandle& OutTargetDataHandle) const;\r\n\r\n\tvirtual void AbilitySpecInputPressed(FGameplayAbilitySpec& Spec) override;\r\n\tvirtual void AbilitySpecInputReleased(FGameplayAbilitySpec& Spec) override;\r\n\r\nprotected:\r\n\r\n\tvoid TryActivateAbilitiesOnSpawn();\r\n\r\nprivate:\r\n\r\n\tTArray<FGameplayAbilitySpecHandle> InputPressedSpecHandles;\r\n\tTArray<FGameplayAbilitySpecHandle> InputReleasedSpecHandles;\r\n\tTArray<FGameplayAbilitySpecHandle> InputHeldSpecHandles;\r\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbilitySystem.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "AbilitySystem/UnifyAbilitySystemComponent.h"\r\n#include "AbilitySystem/Abilities/UnifyGameplayAbility.h"\r\n#include "Animation/UnifyAnimationInstance.h"\r\n#include "UnifyGameplayTags.h"\r\n\r\nvoid UUnifyAbilitySystemComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)\r\n{\r\n\tSuper::TickComponent(DeltaTime, TickType, ThisTickFunction);\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::InitAbilityActorInfo(AActor* InOwnerActor, AActor* InAvatarActor)\r\n{\r\n\tFGameplayAbilityActorInfo* ActorInfo = AbilityActorInfo.Get();\r\n\r\n\tcheck(ActorInfo);\r\n\tcheck(InOwnerActor);\r\n\r\n\tconst bool bHasNewPawnAvatar = Cast<APawn>(InAvatarActor) && (InAvatarActor != ActorInfo->AvatarActor);\r\n\tSuper::InitAbilityActorInfo(InOwnerActor, InAvatarActor);\r\n\r\n\tif (bHasNewPawnAvatar)\r\n\t{\r\n\t\tfor (const FGameplayAbilitySpec& AbilitySpec : ActivatableAbilities.Items)\r\n\t\t{\r\n\t\t\tUUnifyGameplayAbility* AbilityCDO = CastChecked<UUnifyGameplayAbility>(AbilitySpec.Ability);\r\n\r\n\t\t\tif (AbilityCDO->GetInstancingPolicy() != EGameplayAbilityInstancingPolicy::NonInstanced)\r\n\t\t\t{\r\n\t\t\t\tTArray<UGameplayAbility*> Instances = AbilitySpec.GetAbilityInstances();\r\n\t\t\t\tfor (UGameplayAbility* Instance : Instances)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (UUnifyGameplayAbility* AbilityInstance = Cast<UUnifyGameplayAbility>(Instance))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tAbilityInstance->OnPawnAvatarSet();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAbilityCDO->OnPawnAvatarSet();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (UUnifyAnimationInstance* AnimInstance = Cast<UUnifyAnimationInstance>(ActorInfo->GetAnimInstance()))\r\n\t\t{\r\n\t\t\tAnimInstance->RegisterWithAbilitySystem(this);\r\n\t\t}\r\n\r\n\t\tTryActivateAbilitiesOnSpawn();\r\n\t}\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::TryActivateAbilitiesOnSpawn()\r\n{\r\n\tABILITYLIST_SCOPE_LOCK();\r\n\r\n\tfor (const FGameplayAbilitySpec& AbilitySpec : ActivatableAbilities.Items)\r\n\t{\r\n\t\tconst UUnifyGameplayAbility* AbilityCDO = CastChecked<UUnifyGameplayAbility>(AbilitySpec.Ability);\r\n\t\tAbilityCDO->TryActivateAbilityOnSpawn(AbilityActorInfo.Get(), AbilitySpec);\r\n\t}\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::AbilityInputTagPressed(const FGameplayTag& InputTag)\r\n{\r\n\tif (InputTag.IsValid())\r\n\t{\r\n\t\tfor (const FGameplayAbilitySpec& AbilitySpec : ActivatableAbilities.Items)\r\n\t\t{\r\n\t\t\tif (AbilitySpec.Ability && AbilitySpec.DynamicAbilityTags.HasTagExact(InputTag))\r\n\t\t\t{\r\n\t\t\t\tInputPressedSpecHandles.AddUnique(AbilitySpec.Handle);\r\n\t\t\t\tInputHeldSpecHandles.AddUnique(AbilitySpec.Handle);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::AbilityInputTagReleased(const FGameplayTag& InputTag)\r\n{\r\n\tif (InputTag.IsValid())\r\n\t{\r\n\t\tfor (const FGameplayAbilitySpec& AbilitySpec : ActivatableAbilities.Items)\r\n\t\t{\r\n\t\t\tif (AbilitySpec.Ability && AbilitySpec.DynamicAbilityTags.HasTagExact(InputTag))\r\n\t\t\t{\r\n\t\t\t\tInputReleasedSpecHandles.AddUnique(AbilitySpec.Handle);\r\n\t\t\t\tInputHeldSpecHandles.Remove(AbilitySpec.Handle);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::ProcessAbilityInput(float DeltaTime, bool bGamePaused)\r\n{\r\n\tif (HasMatchingGameplayTag(FUnifyGameplayTags::Get().Ability_Input_Blocked))\r\n\t{\r\n\t\tClearAbilityInput();\r\n\t\treturn;\r\n\t}\r\n\r\n\tstatic TArray<FGameplayAbilitySpecHandle> AbilitiesToActivate;\r\n\tAbilitiesToActivate.Reset();\r\n\r\n\tfor (const FGameplayAbilitySpecHandle& SpecHandle : InputHeldSpecHandles)\r\n\t{\r\n\t\tif (const FGameplayAbilitySpec* Spec = FindAbilitySpecFromHandle(SpecHandle))\r\n\t\t{\r\n\t\t\tconst UUnifyGameplayAbility* Ability = CastChecked<UUnifyGameplayAbility>(Spec->Ability);\r\n\t\t\tif (!Spec->IsActive() && Ability->GetActivationPolicy() == EGameplayAbilityActivationPolicy::OnInputHeld)\r\n\t\t\t{\r\n\t\t\t\tAbilitiesToActivate.AddUnique(Spec->Handle);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (const FGameplayAbilitySpecHandle& SpecHandle : InputPressedSpecHandles)\r\n\t{\r\n\t\tif (FGameplayAbilitySpec* Spec = FindAbilitySpecFromHandle(SpecHandle))\r\n\t\t{\r\n\t\t\tSpec->InputPressed = true;\r\n\r\n\t\t\tif (Spec->IsActive())\r\n\t\t\t{\r\n\t\t\t\tAbilitySpecInputPressed(*Spec);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst UUnifyGameplayAbility* Ability = CastChecked<UUnifyGameplayAbility>(Spec->Ability);\r\n\t\t\t\tif (Ability->GetActivationPolicy() == EGameplayAbilityActivationPolicy::OnInputPressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tAbilitiesToActivate.AddUnique(Spec->Handle);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (const FGameplayAbilitySpecHandle& Handle : AbilitiesToActivate)\r\n\t{\r\n\t\tTryActivateAbility(Handle);\r\n\t}\r\n\r\n\tfor (const FGameplayAbilitySpecHandle& SpecHandle : InputReleasedSpecHandles)\r\n\t{\r\n\t\tif (FGameplayAbilitySpec* Spec = FindAbilitySpecFromHandle(SpecHandle))\r\n\t\t{\r\n\t\t\tSpec->InputPressed = false;\r\n\r\n\t\t\tif (Spec->IsActive())\r\n\t\t\t{\r\n\t\t\t\tAbilitySpecInputReleased(*Spec);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tInputPressedSpecHandles.Reset();\r\n\tInputReleasedSpecHandles.Reset();\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::ClearAbilityInput()\r\n{\r\n\tInputPressedSpecHandles.Reset();\r\n\tInputReleasedSpecHandles.Reset();\r\n\tInputHeldSpecHandles.Reset();\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::GetAbilityTargetData(const FGameplayAbilitySpecHandle AbilityHandle, FGameplayAbilityActivationInfo ActivationInfo, FGameplayAbilityTargetDataHandle& OutTargetDataHandle) const\r\n{\r\n\t// Not yet implemented\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::AbilitySpecInputPressed(FGameplayAbilitySpec& Spec)\r\n{\r\n\tif (UUnifyGameplayAbility* Ability = Cast<UUnifyGameplayAbility>(Spec.Ability))\r\n\t{\r\n\t\tAbility->InputPressed(Spec);\r\n\t}\r\n}\r\n\r\nvoid UUnifyAbilitySystemComponent::AbilitySpecInputReleased(FGameplayAbilitySpec& Spec)\r\n{\r\n\tif (UUnifyGameplayAbility* Ability = Cast<UUnifyGameplayAbility>(Spec.Ability))\r\n\t{\r\n\t\tAbility->InputReleased(Spec);\r\n\t}\r\n}\r\n\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbility.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "CoreMinimal.h"\r\n#include <Abilities/GameplayAbility.h>\r\n#include "UnifyGameplayAbility.generated.h"\r\n\r\nclass UUnifyAbilitySystemComponent;\r\nclass AUnifyPlayerController;\r\nclass AUnifyCharacter;\r\n\r\nUENUM(BlueprintType)\r\nenum class EGameplayAbilityActivationPolicy : uint8\r\n{\r\n\tOnInputPressed,\r\n\tOnInputHeld,\r\n\tOnSpawn,\r\n};\r\n\r\nUCLASS()\r\nclass UNIFY_API UUnifyGameplayAbility : public UGameplayAbility\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tUUnifyGameplayAbility();\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Ability")\r\n\tEGameplayAbilityActivationPolicy GetActivationPolicy() const;\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Ability")\r\n\tEGameplayAbilityActivationGroup GetActivationGroup() const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Ability")\r\n\tUUnifyAbilitySystemComponent* GetUnifyAbilitySystemComponentFromActorInfo() const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Ability")\r\n\tAUnifyPlayerController* GetUnifyPlayerControllerFromActorInfo() const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Ability")\r\n\tAController* GetControllerFromActorInfo() const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Ability")\r\n\tAUnifyCharacter* GetUnifyCharacterFromActorInfo() const;\r\n\r\n\tvirtual void OnGiveAbility(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) override;\r\n\tvirtual void OnRemoveAbility(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) override;\r\n\t\r\n\tvoid TryActivateAbilityOnSpawn(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) const;\r\n\r\n\tvirtual void OnAvatarSet(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) override;\r\n\tvirtual void OnPawnAvatarSet();\r\n\r\n\tUFUNCTION(BlueprintImplementableEvent, DisplayName = "On Ability Granted", Category = "Ability")\r\n\tvoid BP_OnAbilityGranted();\r\n\r\n\tUFUNCTION(BlueprintImplementableEvent, DisplayName = "On Ability Revoked", Category = "Ability")\r\n\tvoid BP_OnAbilityRevoked();\r\n\r\n\tUFUNCTION(BlueprintImplementableEvent, DisplayName = "On Avatar Set", Category = "Ability")\r\n\tvoid BP_OnAvatarSet();\r\n\r\nprotected:\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Ability|Activation")\r\n\tEGameplayAbilityActivationPolicy ActivationPolicy;\r\n\t\r\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbility.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "AbilitySystem/Abilities/UnifyGameplayAbility.h"\r\n#include "AbilitySystem/UnifyAbilitySystemComponent.h"\r\n#include "Player/UnifyPlayerController.h"\r\n#include "Character/UnifyCharacter.h"\r\n\r\nUUnifyGameplayAbility::UUnifyGameplayAbility()\r\n{\r\n\tReplicationPolicy = EGameplayAbilityReplicationPolicy::ReplicateNo;\r\n\tInstancingPolicy = EGameplayAbilityInstancingPolicy::InstancedPerActor;\r\n\tNetExecutionPolicy = EGameplayAbilityNetExecutionPolicy::LocalPredicted;\r\n\tNetSecurityPolicy = EGameplayAbilityNetSecurityPolicy::ClientOrServer;\r\n\tActivationPolicy = EGameplayAbilityActivationPolicy::OnInputPressed;\r\n}\r\n\r\nEGameplayAbilityActivationPolicy UUnifyGameplayAbility::GetActivationPolicy() const\r\n{\r\n\treturn ActivationPolicy;\r\n}\r\n\r\nUUnifyAbilitySystemComponent* UUnifyGameplayAbility::GetUnifyAbilitySystemComponentFromActorInfo() const\r\n{\r\n\treturn (CurrentActorInfo ? Cast<UUnifyAbilitySystemComponent>(CurrentActorInfo->AbilitySystemComponent.Get()) : nullptr);\r\n}\r\n\r\nAUnifyPlayerController* UUnifyGameplayAbility::GetUnifyPlayerControllerFromActorInfo() const\r\n{\r\n\treturn (CurrentActorInfo ? Cast<AUnifyPlayerController>(CurrentActorInfo->PlayerController.Get()) : nullptr);\r\n}\r\n\r\nAController* UUnifyGameplayAbility::GetControllerFromActorInfo() const\r\n{\r\n\tif (CurrentActorInfo)\r\n\t{\r\n\t\tif (AController* PC = CurrentActorInfo->PlayerController.Get())\r\n\t\t{\r\n\t\t\treturn PC;\r\n\t\t}\r\n\r\n\t\tAActor* TestActor = CurrentActorInfo->OwnerActor.Get();\r\n\t\t\r\n\t\twhile (TestActor)\r\n\t\t{\r\n\t\t\tif (AController* C = Cast<AController>(TestActor))\r\n\t\t\t{\r\n\t\t\t\treturn C;\r\n\t\t\t}\r\n\r\n\t\t\tif (const APawn* Pawn = Cast<APawn>(TestActor))\r\n\t\t\t{\r\n\t\t\t\treturn Pawn->GetController();\r\n\t\t\t}\r\n\r\n\t\t\tTestActor = TestActor->GetOwner();\r\n\t\t}\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nAUnifyCharacter* UUnifyGameplayAbility::GetUnifyCharacterFromActorInfo() const\r\n{\r\n\treturn (CurrentActorInfo ? Cast<AUnifyCharacter>(CurrentActorInfo->AvatarActor.Get()) : nullptr);\r\n}\r\n\r\nvoid UUnifyGameplayAbility::OnGiveAbility(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec)\r\n{\r\n\tSuper::OnGiveAbility(ActorInfo, Spec);\r\n\r\n\tBP_OnAbilityGranted();\r\n\tTryActivateAbilityOnSpawn(ActorInfo, Spec);\r\n}\r\n\r\nvoid UUnifyGameplayAbility::OnRemoveAbility(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec)\r\n{\r\n\tBP_OnAbilityRevoked();\r\n\t\r\n\tSuper::OnRemoveAbility(ActorInfo, Spec);\r\n}\r\n\r\nvoid UUnifyGameplayAbility::TryActivateAbilityOnSpawn(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) const\r\n{\r\n\tconst bool bIsPredicting = (Spec.ActivationInfo.ActivationMode == EGameplayAbilityActivationMode::Predicting);\r\n\r\n\tif (ActorInfo && !Spec.IsActive() && !bIsPredicting && (ActivationPolicy == EGameplayAbilityActivationPolicy::OnSpawn))\r\n\t{\r\n\t\tUAbilitySystemComponent* ASC = ActorInfo->AbilitySystemComponent.Get();\r\n\t\tconst AActor* AvatarActor = ActorInfo->AvatarActor.Get();\r\n\r\n\t\tif (ASC && AvatarActor && !AvatarActor->GetTearOff() && (AvatarActor->GetLifeSpan() <= 0.0f))\r\n\t\t{\r\n\t\t\tconst bool bIsLocalExecution = (NetExecutionPolicy == EGameplayAbilityNetExecutionPolicy::LocalPredicted) || (NetExecutionPolicy == EGameplayAbilityNetExecutionPolicy::LocalOnly);\r\n\t\t\tconst bool bIsServerExecution = (NetExecutionPolicy == EGameplayAbilityNetExecutionPolicy::ServerOnly) || (NetExecutionPolicy == EGameplayAbilityNetExecutionPolicy::ServerInitiated);\r\n\r\n\t\t\tconst bool bClientShouldActivate = ActorInfo->IsLocallyControlled() && bIsLocalExecution;\r\n\t\t\tconst bool bServerShouldActivate = ActorInfo->IsNetAuthority() && bIsServerExecution;\r\n\r\n\t\t\tif (bClientShouldActivate || bServerShouldActivate)\r\n\t\t\t{\r\n\t\t\t\tASC->TryActivateAbility(Spec.Handle);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid UUnifyGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec)\r\n{\r\n\tSuper::OnAvatarSet(ActorInfo, Spec);\r\n\t\r\n\tBP_OnAvatarSet();\r\n}\r\n\r\nvoid UUnifyGameplayAbility::OnPawnAvatarSet()\r\n{\r\n\t\r\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourPlayerController.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'UCLASS()\r\nclass UNIFY_API AUnifyPlayerController : public ACommonPlayerController, public IAbilitySystemInterface, public IGameplayInteractionInterface\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tAUnifyPlayerController();\r\n\r\n    UFUNCTION(BlueprintCallable, Category = "Unify|PlayerController")\r\n\tUUnifyAbilitySystemComponent* GetUnifyAbilitySystemComponent() const;\r\n\r\n\tvirtual void PreProcessInput(const float DeltaTime, const bool bGamePaused) override;\r\n\tvirtual void PostProcessInput(const float DeltaTime, const bool bGamePaused) override;\r\n\r\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourPlayerController.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"AUnifyPlayerController::AUnifyPlayerController()\r\n{\r\n\r\n}\r\n\r\nUAbilitySystemComponent* AUnifyPlayerController::GetAbilitySystemComponent() const\r\n{\r\n\tif (const AUnifyPlayerState* MyPlayerState = GetPlayerState<AUnifyPlayerState>())\r\n\t{\r\n\t\treturn MyPlayerState->GetAbilitySystemComponent();\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nvoid AUnifyPlayerController::PreProcessInput(const float DeltaTime, const bool bGamePaused)\r\n{\r\n\tSuper::PreProcessInput(DeltaTime, bGamePaused);\r\n}\r\n\r\nvoid AUnifyPlayerController::PostProcessInput(const float DeltaTime, const bool bGamePaused)\r\n{\r\n\tif (UUnifyAbilitySystemComponent* ASC = GetUnifyAbilitySystemComponent())\r\n\t{\r\n\t\tASC->ProcessAbilityInput(DeltaTime, bGamePaused);\r\n\t}\r\n\t\r\n\tSuper::PostProcessInput(DeltaTime, bGamePaused);\r\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourInputConfig.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "CoreMinimal.h"\r\n#include "Engine/DataAsset.h"\r\n#include "GameplayTagContainer.h"\r\n#include "EnhancedInputComponent.h"\r\n#include "UnifyInputConfig.generated.h"\r\n\r\nclass UInputAction;\r\nclass UInputMappingContext;\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FInputMappingContextAndPriority\r\n{\r\n\tGENERATED_BODY()\r\n\r\n\tFInputMappingContextAndPriority();\r\n\r\n\tUPROPERTY(EditAnywhere, Category="Input")\r\n\tTObjectPtr<UInputMappingContext> InputMapping;\r\n\r\n\t/** Higher priority input mappings will be prioritized over mappings with a lower priority. */\r\n\tUPROPERTY(EditAnywhere, Category="Input")\r\n\tint32 Priority;\r\n\t\r\n};\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FUnifyInputAction\r\n{\r\n\tGENERATED_BODY()\r\n\r\n\tFUnifyInputAction();\r\n\r\n\tbool IsValid() const;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Input")\r\n\tTObjectPtr<UInputAction> InputAction;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, meta = (Categories = "Input"), Category = "Input")\r\n\tFGameplayTag InputTag;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Input")\r\n\tTArray<ETriggerEvent> PressedTriggers;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Input")\r\n\tTArray<ETriggerEvent> ReleasedTriggers;\r\n\t\r\n};\r\n\r\nUCLASS()\r\nclass UNIFY_API UUnifyInputConfig : public UDataAsset\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tUUnifyInputConfig(const FObjectInitializer& ObjectInitializer);\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Input")\r\n\tFUnifyInputAction FindNativeActionForTag(const FGameplayTag& InputTag, bool bLogNotFound = true) const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Input")\r\n\tconst UInputAction* FindNativeInputActionForTag(const FGameplayTag& InputTag, bool bLogNotFound = true) const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Input")\r\n\tFUnifyInputAction FindAbilityActionForTag(const FGameplayTag& InputTag, bool bLogNotFound = true) const;\r\n\r\n\tUFUNCTION(BlueprintCallable, Category = "Unify|Input")\r\n\tconst UInputAction* FindAbilityInputActionForTag(const FGameplayTag& InputTag, bool bLogNotFound = true) const;\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Input")\r\n\tconst TArray<FUnifyInputAction>& GetNativeInputActions() const;\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Input")\r\n\tconst TArray<FUnifyInputAction>& GetAbilityInputActions() const;\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Input")\r\n\tconst TArray<FInputMappingContextAndPriority>& GetInputMappingContexts() const;\r\n\r\nprotected:\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Meta = (TitleProperty = "InputAction"), Category = "Input")\r\n\tTArray<FUnifyInputAction> NativeInputActions;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Meta = (TitleProperty = "InputAction"), Category = "Input")\r\n\tTArray<FUnifyInputAction> AbilityInputActions;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category="Input")\r\n\tTArray<FInputMappingContextAndPriority> InputMappings;\r\n\t\r\n};\r\n\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourInputConfig.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "Input/UnifyInputConfig.h"\r\n#include "UnifyLogging.h"\r\n\r\nFInputMappingContextAndPriority::FInputMappingContextAndPriority() : InputMapping(nullptr), Priority(0)\r\n{\r\n}\r\n\r\nFUnifyInputAction::FUnifyInputAction()\r\n{\r\n\tPressedTriggers.AddUnique(ETriggerEvent::Triggered);\r\n\tReleasedTriggers.AddUnique(ETriggerEvent::Completed);\r\n}\r\n\r\nbool FUnifyInputAction::IsValid() const\r\n{\r\n\treturn InputAction != nullptr;\r\n}\r\n\r\nUUnifyInputConfig::UUnifyInputConfig(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\r\n{\r\n}\r\n\r\nFUnifyInputAction UUnifyInputConfig::FindNativeActionForTag(const FGameplayTag& InputTag, const bool bLogNotFound) const\r\n{\r\n\tfor (const FUnifyInputAction& Action : NativeInputActions)\r\n\t{\r\n\t\tif (Action.InputAction && (Action.InputTag == InputTag))\r\n\t\t{\r\n\t\t\treturn Action;\r\n\t\t}\r\n\t}\r\n\r\n\tif (bLogNotFound)\r\n\t{\r\n\t\tUNIFY_LOG(Error, TEXT("Can\'t find NativeAction for InputTag {0} on InputConfig {1}"), *InputTag.ToString(), *THIS_OBJECT_NAME);\r\n\t}\r\n\r\n\treturn FUnifyInputAction();\r\n}\r\n\r\nconst UInputAction* UUnifyInputConfig::FindNativeInputActionForTag(const FGameplayTag& InputTag, const bool bLogNotFound) const\r\n{\r\n\tfor (const FUnifyInputAction& Action : NativeInputActions)\r\n\t{\r\n\t\tif (Action.InputAction && (Action.InputTag == InputTag))\r\n\t\t{\r\n\t\t\treturn Action.InputAction;\r\n\t\t}\r\n\t}\r\n\r\n\tif (bLogNotFound)\r\n\t{\r\n\t\tUNIFY_LOG(Error, TEXT("Can\'t find NativeInputAction for InputTag [%s] on InputConfig [%s]."), *InputTag.ToString(), *THIS_OBJECT_NAME);\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nFUnifyInputAction UUnifyInputConfig::FindAbilityActionForTag(const FGameplayTag& InputTag, bool bLogNotFound) const\r\n{\r\n\tfor (const FUnifyInputAction& Action : AbilityInputActions)\r\n\t{\r\n\t\tif (Action.InputAction && (Action.InputTag == InputTag))\r\n\t\t{\r\n\t\t\treturn Action;\r\n\t\t}\r\n\t}\r\n\r\n\tif (bLogNotFound)\r\n\t{\r\n\t\tUNIFY_LOG(Error, TEXT("Can\'t find NativeAction for InputTag [%s] on InputConfig [%s]."), *InputTag.ToString(), *THIS_OBJECT_NAME);\r\n\t}\r\n\r\n\treturn FUnifyInputAction();\r\n}\r\n\r\nconst UInputAction* UUnifyInputConfig::FindAbilityInputActionForTag(const FGameplayTag& InputTag, const bool bLogNotFound) const\r\n{\r\n\tfor (const FUnifyInputAction& Action : AbilityInputActions)\r\n\t{\r\n\t\tif (Action.InputAction && (Action.InputTag == InputTag))\r\n\t\t{\r\n\t\t\treturn Action.InputAction;\r\n\t\t}\r\n\t}\r\n\r\n\tif (bLogNotFound)\r\n\t{\r\n\t\tUNIFY_LOG(Error, TEXT("Can\'t find AbilityInputAction for InputTag [%s] on InputConfig [%s]."), *InputTag.ToString(), *THIS_OBJECT_NAME);\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nconst TArray<FUnifyInputAction>& UUnifyInputConfig::GetNativeInputActions() const\r\n{\r\n\treturn NativeInputActions;\r\n}\r\n\r\nconst TArray<FUnifyInputAction>& UUnifyInputConfig::GetAbilityInputActions() const\r\n{\r\n\treturn AbilityInputActions;\r\n}\r\n\r\nconst TArray<FInputMappingContextAndPriority>& UUnifyInputConfig::GetInputMappingContexts() const\r\n{\r\n\treturn InputMappings;\r\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbilitySet.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "CoreMinimal.h"\r\n#include "ActiveGameplayEffectHandle.h"\r\n#include "GameplayAbilitySpecHandle.h"\r\n#include "Engine/DataAsset.h"\r\n#include "GameplayTagContainer.h"\r\n#include "UnifyAbilitySet.generated.h"\r\n\r\nclass UUnifyAbilitySystemComponent;\r\nclass UUnifyGameplayAbility;\r\nclass UGameplayEffect;\r\nclass UAttributeSet;\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FUnifyGameplayAbilitySet\r\n{\r\n\tGENERATED_BODY()\r\n\r\n\tFUnifyGameplayAbilitySet();\r\n\r\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite)\r\n\tTSubclassOf<UUnifyGameplayAbility> AbilityClass;\r\n\r\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite)\r\n\tint32 AbilityLevel;\r\n\r\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Meta = (Categories = "Input"))\r\n\tFGameplayTag InputTag;\r\n};\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FUnifyGameplayEffectSet\r\n{\r\n\tGENERATED_BODY()\r\n\r\n\tFUnifyGameplayEffectSet();\r\n\r\n\tUPROPERTY(EditDefaultsOnly)\r\n\tTSubclassOf<UGameplayEffect> EffectClass;\r\n\r\n\tUPROPERTY(EditDefaultsOnly)\r\n\tfloat EffectLevel;\r\n};\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FUnifyGameplayAttributeSet\r\n{\r\n\tGENERATED_BODY()\r\n\r\n\tFUnifyGameplayAttributeSet();\r\n\t\r\n\tUPROPERTY(EditDefaultsOnly)\r\n\tTSubclassOf<UAttributeSet> AttributeSet;\r\n};\r\n\r\nUSTRUCT(BlueprintType)\r\nstruct FUnifyAbilitySetGrantedHandles\r\n{\r\n\tGENERATED_BODY()\r\n\t\r\n\tFUnifyAbilitySetGrantedHandles();\r\n\t\r\n\tvoid AddAbilitySpecHandle(const FGameplayAbilitySpecHandle& Handle);\r\n\tvoid AddGameplayEffectHandle(const FActiveGameplayEffectHandle& Handle);\r\n\tvoid AddAttributeSet(UAttributeSet* Set);\r\n\r\n\tvoid RevokeFromAbilitySystem(UUnifyAbilitySystemComponent* AbilitySystem);\r\n\r\nprotected:\r\n\r\n\tUPROPERTY()\r\n\tTArray<FGameplayAbilitySpecHandle> AbilitySpecHandles;\r\n\r\n\tUPROPERTY()\r\n\tTArray<FActiveGameplayEffectHandle> EffectHandles;\r\n\r\n\tUPROPERTY()\r\n\tTArray<TObjectPtr<UAttributeSet>> AttributeSets;\r\n};\r\n\r\nUCLASS(BlueprintType, Blueprintable, Const)\r\nclass UNIFY_API UUnifyAbilitySet : public UPrimaryDataAsset\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tUUnifyAbilitySet();\r\n\r\n\tvoid GrantToAbilitySystem(UUnifyAbilitySystemComponent* AbilitySystem, FUnifyAbilitySetGrantedHandles* OutGrantedHandles, UObject* SourceObject = nullptr);\r\n\r\n\tUPROPERTY(EditDefaultsOnly, Category = "Abilities")\r\n\tTArray<FUnifyGameplayAbilitySet> GrantedAbilities;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, Category = "Effects")\r\n\tTArray<FUnifyGameplayEffectSet> GrantedEffects;\r\n\r\n\tUPROPERTY(EditDefaultsOnly, Category = "Attributes")\r\n\tTArray<FUnifyGameplayAttributeSet> GrantedAttributes;\r\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourAbilitySet.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Copyright Nazake. All Rights Reserved.\r\n\r\n#include "AbilitySystem/UnifyAbilitySet.h"\r\n#include "AbilitySystem/UnifyAbilitySystemComponent.h"\r\n#include "AbilitySystem/Abilities/UnifyGameplayAbility.h"\r\n#include "UnifyLogging.h"\r\n\r\nFUnifyGameplayAbilitySet::FUnifyGameplayAbilitySet() : AbilityClass(nullptr), AbilityLevel(1), InputTag(FGameplayTag::EmptyTag)\r\n{\r\n}\r\n\r\nFUnifyGameplayEffectSet::FUnifyGameplayEffectSet() : EffectClass(nullptr), EffectLevel(1.0f)\r\n{\r\n}\r\n\r\nFUnifyGameplayAttributeSet::FUnifyGameplayAttributeSet() : AttributeSet(nullptr)\r\n{\r\n}\r\n\r\nFUnifyAbilitySetGrantedHandles::FUnifyAbilitySetGrantedHandles()\r\n{\r\n}\r\n\r\nvoid FUnifyAbilitySetGrantedHandles::AddAbilitySpecHandle(const FGameplayAbilitySpecHandle& Handle)\r\n{\r\n\tif (Handle.IsValid())\r\n\t{\r\n\t\tAbilitySpecHandles.Add(Handle);\r\n\t}\r\n}\r\n\r\nvoid FUnifyAbilitySetGrantedHandles::AddGameplayEffectHandle(const FActiveGameplayEffectHandle& Handle)\r\n{\r\n\tif (Handle.IsValid())\r\n\t{\r\n\t\tEffectHandles.Add(Handle);\r\n\t}\r\n}\r\n\r\nvoid FUnifyAbilitySetGrantedHandles::AddAttributeSet(UAttributeSet* Set)\r\n{\r\n\tAttributeSets.Add(Set);\r\n}\r\n\r\nvoid FUnifyAbilitySetGrantedHandles::RevokeFromAbilitySystem(UUnifyAbilitySystemComponent* AbilitySystem)\r\n{\r\n\tcheck(AbilitySystem);\r\n\r\n\tif (!AbilitySystem->IsOwnerActorAuthoritative())\r\n\t{\r\n\t\t// Must be authoritative to give or take ability sets.\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (const FGameplayAbilitySpecHandle& Handle : AbilitySpecHandles)\r\n\t{\r\n\t\tif (Handle.IsValid())\r\n\t\t{\r\n\t\t\tAbilitySystem->ClearAbility(Handle);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (const FActiveGameplayEffectHandle& Handle : EffectHandles)\r\n\t{\r\n\t\tif (Handle.IsValid())\r\n\t\t{\r\n\t\t\tAbilitySystem->RemoveActiveGameplayEffect(Handle);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (UAttributeSet* Set : AttributeSets)\r\n\t{\r\n\t\tAbilitySystem->RemoveSpawnedAttribute(Set);\r\n\t}\r\n\r\n\tAbilitySpecHandles.Reset();\r\n\tEffectHandles.Reset();\r\n\tAttributeSets.Reset();\r\n}\r\n\r\nUUnifyAbilitySet::UUnifyAbilitySet()\r\n{\r\n}\r\n\r\nvoid UUnifyAbilitySet::GrantToAbilitySystem(UUnifyAbilitySystemComponent* AbilitySystem, FUnifyAbilitySetGrantedHandles* OutGrantedHandles, UObject* SourceObject)\r\n{\r\n\tcheck(AbilitySystem);\r\n\r\n\tif (!AbilitySystem->IsOwnerActorAuthoritative())\r\n\t{\r\n\t\t// Must be authoritative to give or take ability sets.\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Grant the gameplay abilities.\r\n\tfor (int32 AbilityIndex = 0; AbilityIndex < GrantedAbilities.Num(); ++AbilityIndex)\r\n\t{\r\n\t\tconst FUnifyGameplayAbilitySet& AbilityToGrant = GrantedAbilities[AbilityIndex];\r\n\r\n\t\tif (!IsValid(AbilityToGrant.AbilityClass))\r\n\t\t{\r\n\t\t\tUNIFY_LOG(Error, TEXT("GrantedAbilities[%d] on ability set [%s] is not valid."), AbilityIndex, *GetNameSafe(this));\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tUUnifyGameplayAbility* AbilityCDO = AbilityToGrant.AbilityClass->GetDefaultObject<UUnifyGameplayAbility>();\r\n\r\n\t\tFGameplayAbilitySpec AbilitySpec(AbilityCDO, AbilityToGrant.AbilityLevel);\r\n\t\tAbilitySpec.SourceObject = SourceObject;\r\n\t\tAbilitySpec.DynamicAbilityTags.AddTag(AbilityToGrant.InputTag);\r\n\r\n\t\tconst FGameplayAbilitySpecHandle AbilitySpecHandle = AbilitySystem->GiveAbility(AbilitySpec);\r\n\r\n\t\tif (OutGrantedHandles)\r\n\t\t{\r\n\t\t\tOutGrantedHandles->AddAbilitySpecHandle(AbilitySpecHandle);\r\n\t\t}\r\n\t}\r\n\r\n\t// Grant the gameplay effects.\r\n\tfor (int32 EffectIndex = 0; EffectIndex < GrantedEffects.Num(); ++EffectIndex)\r\n\t{\r\n\t\tconst FUnifyGameplayEffectSet& EffectToGrant = GrantedEffects[EffectIndex];\r\n\r\n\t\tif (!IsValid(EffectToGrant.EffectClass))\r\n\t\t{\r\n\t\t\tUNIFY_LOG(Error, TEXT("GrantedGameplayEffects[%d] on ability set [%s] is not valid"), EffectIndex, *GetNameSafe(this));\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst UGameplayEffect* GameplayEffect = EffectToGrant.EffectClass->GetDefaultObject<UGameplayEffect>();\r\n\t\tconst FActiveGameplayEffectHandle GameplayEffectHandle = AbilitySystem->ApplyGameplayEffectToSelf(GameplayEffect, EffectToGrant.EffectLevel, AbilitySystem->MakeEffectContext());\r\n\r\n\t\tif (OutGrantedHandles)\r\n\t\t{\r\n\t\t\tOutGrantedHandles->AddGameplayEffectHandle(GameplayEffectHandle);\r\n\t\t}\r\n\t}\r\n\r\n\t// Grant the attribute sets.\r\n\tfor (int32 SetIndex = 0; SetIndex < GrantedAttributes.Num(); ++SetIndex)\r\n\t{\r\n\t\tconst FUnifyGameplayAttributeSet& SetToGrant = GrantedAttributes[SetIndex];\r\n\r\n\t\tif (!IsValid(SetToGrant.AttributeSet))\r\n\t\t{\r\n\t\t\tUNIFY_LOG(Error, TEXT("GrantedAttributes[%d] on ability set [%s] is not valid"), SetIndex, *GetNameSafe(this));\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tUAttributeSet* NewSet = NewObject<UAttributeSet>(AbilitySystem->GetOwner(), SetToGrant.AttributeSet);\r\n\t\tAbilitySystem->AddAttributeSetSubobject(NewSet);\r\n\r\n\t\tif (OutGrantedHandles)\r\n\t\t{\r\n\t\t\tOutGrantedHandles->AddAttributeSet(NewSet);\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourInputComponent.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "CoreMinimal.h"\r\n#include "UnifyLogging.h"\r\n#include "UnifyInputConfig.h"\r\n#include "EnhancedInputComponent.h"\r\n#include "UnifyInputComponent.generated.h"\r\n\r\nclass UEnhancedInputLocalPlayerSubsystem;\r\n\r\nUCLASS(Config = "Input")\r\nclass UNIFY_API UUnifyInputComponent : public UEnhancedInputComponent\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\t\r\n\tUUnifyInputComponent(const FObjectInitializer& ObjectInitializer);\r\n\r\n\tvoid AddInputMappings(const UUnifyInputConfig* InputConfig, UEnhancedInputLocalPlayerSubsystem* InputSubsystem) const;\r\n\tvoid RemoveInputMappings(const UUnifyInputConfig* InputConfig, UEnhancedInputLocalPlayerSubsystem* InputSubsystem) const;\r\n\tvoid RemoveBinds(TArray<uint32>& BindHandles);\r\n\r\n\ttemplate<class UserClass, typename FuncType>\r\n\tvoid BindNativeAction(const UUnifyInputConfig* InputConfig, const FGameplayTag& InputTag, UserClass* Object, FuncType Func, bool bLogIfNotFound);\r\n\r\n\ttemplate<class UserClass, typename PressedFuncType, typename ReleasedFuncType>\r\n\tvoid BindAbilityActions(const UUnifyInputConfig* InputConfig, UserClass* Object, PressedFuncType PressedFunc, ReleasedFuncType ReleasedFunc, TArray<uint32>& BindHandles);\r\n};\r\n\r\ntemplate <class UserClass, typename FuncType>\r\nvoid UUnifyInputComponent::BindNativeAction(const UUnifyInputConfig* InputConfig, const FGameplayTag& InputTag, UserClass* Object, FuncType Func, const bool bLogIfNotFound)\r\n{\r\n\tcheck(InputConfig);\r\n\r\n\tconst FUnifyInputAction Action = InputConfig->FindNativeActionForTag(InputTag, bLogIfNotFound);\r\n\t\r\n\tif (Action.IsValid())\r\n\t{\r\n\t\tfor (const ETriggerEvent& TriggerEvent: Action.PressedTriggers)\r\n\t\t{\r\n\t\t\tif (TriggerEvent != ETriggerEvent::None)\r\n\t\t\t{\r\n\t\t\t\tBindAction(Action.InputAction, TriggerEvent, Object, Func);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\ntemplate <class UserClass, typename PressedFuncType, typename ReleasedFuncType>\r\nvoid UUnifyInputComponent::BindAbilityActions(const UUnifyInputConfig* InputConfig, UserClass* Object, PressedFuncType PressedFunc, ReleasedFuncType ReleasedFunc, TArray<uint32>& BindHandles)\r\n{\r\n\tcheck(InputConfig);\r\n\r\n\tfor (const FUnifyInputAction& Action : InputConfig->GetAbilityInputActions())\r\n\t{\r\n\t\tif (Action.IsValid() && Action.InputTag.IsValid())\r\n\t\t{\r\n\t\t\tif (PressedFunc)\r\n\t\t\t{\r\n\t\t\t\tfor (const ETriggerEvent& TriggerEvent: Action.PressedTriggers)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (TriggerEvent != ETriggerEvent::None)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBindHandles.Add(BindAction(Action.InputAction, TriggerEvent, Object, PressedFunc, Action.InputTag).GetHandle());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (ReleasedFunc)\r\n\t\t\t{\r\n\t\t\t\tfor (const ETriggerEvent& TriggerEvent: Action.ReleasedTriggers)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (TriggerEvent != ETriggerEvent::None)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBindHandles.Add(BindAction(Action.InputAction, TriggerEvent, Object, ReleasedFunc, Action.InputTag).GetHandle());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourInputComponent.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "Input/UnifyInputComponent.h"\r\n#include "Input/UnifyInputConfig.h"\r\n#include "EnhancedInputSubsystems.h"\r\n\r\nUUnifyInputComponent::UUnifyInputComponent(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\r\n{\r\n}\r\n\r\nvoid UUnifyInputComponent::AddInputMappings(const UUnifyInputConfig* InputConfig, UEnhancedInputLocalPlayerSubsystem* InputSubsystem) const\r\n{\r\n\tcheck(InputConfig);\r\n\tcheck(InputSubsystem);\r\n\r\n\tfor (const FInputMappingContextAndPriority& Entry: InputConfig->GetInputMappingContexts())\r\n\t{\r\n\t\tif (Entry.InputMapping)\r\n\t\t{\r\n\t\t\tInputSubsystem->AddMappingContext(Entry.InputMapping, Entry.Priority);\r\n\t\t}\r\n\t}\r\n\r\n\t// Here you can handle any custom logic to add something from your input config if required\r\n}\r\n\r\nvoid UUnifyInputComponent::RemoveInputMappings(const UUnifyInputConfig* InputConfig, UEnhancedInputLocalPlayerSubsystem* InputSubsystem) const\r\n{\r\n\tcheck(InputConfig);\r\n\tcheck(InputSubsystem);\r\n\t\r\n\tfor (const FInputMappingContextAndPriority& Entry: InputConfig->GetInputMappingContexts())\r\n\t{\r\n\t\tif (Entry.InputMapping)\r\n\t\t{\r\n\t\t\tInputSubsystem->RemoveMappingContext(Entry.InputMapping);\r\n\t\t}\r\n\t}\r\n\r\n\t// Here you can handle any custom logic to remove input mappings that you may have added above\r\n}\r\n\r\nvoid UUnifyInputComponent::RemoveBinds(TArray<uint32>& BindHandles)\r\n{\r\n\tfor (const uint32 Handle : BindHandles)\r\n\t{\r\n\t\tRemoveBindingByHandle(Handle);\r\n\t}\r\n\t\r\n\tBindHandles.Reset();\r\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Ensure that the ",(0,r.jsx)(n.strong,{children:"Your Enhanced Input Component"})," is enabled and selected to be used in your project settings.",(0,r.jsx)(n.br,{}),"\n","This is required for proper input handling and binding within your game."]})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourCharacter.h"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'UCLASS()\r\nclass UNIFY_API AUnifyCharacter : public ACharacter, public IAbilitySystemInterface, public IGameplayInteractionInterface\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\r\n\tAUnifyPlayerController* GetUnifyPlayerController() const;\r\n\r\n\tvoid Input_AbilityInputTagPressed(FGameplayTag InputTag);\r\n\tvoid Input_AbilityInputTagReleased(FGameplayTag InputTag);\r\n\r\n\tvirtual UAbilitySystemComponent* GetAbilitySystemComponent() const override;\r\n\r\n\tUFUNCTION(BlueprintPure, Category = "Unify|Character")\r\n\tUUnifyAbilitySystemComponent* GetUnifyAbilitySystemComponent() const;\r\n\r\n\tvirtual void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\r\n    void InitializePlayerInput(UUnifyInputComponent* PlayerInputComponent);\r\n\r\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Unify|Input")\r\n\tTArray<TObjectPtr<UUnifyInputConfig>> InputConfigs;\r\n\r\n    TArray<FUnifyAbilitySetGrantedHandles*> AbilitySetsGrantedHandles;\r\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"YourCharacter.cpp"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"AUnifyPlayerController* AUnifyCharacter::GetUnifyPlayerController() const\r\n{\r\n\treturn GetController<AUnifyPlayerController>();\r\n}\r\n\r\nUAbilitySystemComponent* AUnifyCharacter::GetAbilitySystemComponent() const\r\n{\r\n\tif (const AUnifyPlayerState* MyPlayerState = Cast<AUnifyPlayerState>(GetPlayerState()))\r\n\t{\r\n\t\treturn MyPlayerState->GetAbilitySystemComponent();\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nUUnifyAbilitySystemComponent* AUnifyCharacter::GetUnifyAbilitySystemComponent() const\r\n{\r\n\tif (const AUnifyPlayerState* MyPlayerState = Cast<AUnifyPlayerState>(GetPlayerState()))\r\n\t{\r\n\t\treturn MyPlayerState->GetUnifyAbilitySystemComponent();\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\nvoid AUnifyCharacter::Input_AbilityInputTagPressed(const FGameplayTag InputTag)\r\n{\r\n    if (const AUnifyPlayerState* PS = GetPlayerState<AUnifyPlayerState>())\r\n    {\r\n        if (UUnifyAbilitySystemComponent* ASC = PS->GetUnifyAbilitySystemComponent())\r\n        {\r\n            ASC->AbilityInputTagPressed(InputTag);\r\n        }\r\n    }\r\n}\r\n\r\nvoid AUnifyCharacter::Input_AbilityInputTagReleased(const FGameplayTag InputTag)\r\n{\r\n    if (const AUnifyPlayerState* PS = GetPlayerState<AUnifyPlayerState>())\r\n    {\r\n        if (UUnifyAbilitySystemComponent* ASC = PS->GetUnifyAbilitySystemComponent())\r\n        {\r\n            ASC->AbilityInputTagReleased(InputTag);\r\n        }\r\n    }\r\n}\r\n\r\nvoid AUnifyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\r\n{\r\n\tSuper::SetupPlayerInputComponent(PlayerInputComponent);\r\n\r\n\tUUnifyInputComponent* UnifyInputComponent = CastChecked<UUnifyInputComponent>(PlayerInputComponent);\r\n\tInitializePlayerInput(UnifyInputComponent);\r\n}\r\n\r\nvoid AUnifyCharacter::InitializePlayerInput(UUnifyInputComponent* PlayerInputComponent)\r\n{\r\n\tconst FUnifyGameplayTags& GameplayTags = FUnifyGameplayTags::Get();\r\n\r\n\tfor (const UUnifyInputConfig* InputConfig: InputConfigs)\r\n\t{\r\n\t\tif (InputConfig)\r\n\t\t{\r\n            // Bind abilities input based on your input configs\r\n\t\t\tTArray<uint32> BindHandles;\r\n\t\t\tPlayerInputComponent->BindAbilityActions(InputConfig, this, &ThisClass::Input_AbilityInputTagPressed, &ThisClass::Input_AbilityInputTagReleased, /*Out*/ BindHandles);\r\n\r\n\t\t\t// Bind other input such as Move & Look Input\r\n\t\t\tPlayerInputComponent->BindNativeAction(InputConfig, GameplayTags.Input_Move, this, &ThisClass::Input_Move, /*bLogIfNotFound=*/ false);\r\n\t\t\tPlayerInputComponent->BindNativeAction(InputConfig, GameplayTags.Input_Look, this, &ThisClass::Input_Look, /*bLogIfNotFound=*/ false);    \t\t\r\n\t\t}\r\n\t}\r\n}\r\n\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"Avoid Circular Dependency Issues",type:"warning",children:[(0,r.jsxs)(n.p,{children:["To prevent circular dependency issues in your project, it is recommended to ",(0,r.jsx)(n.strong,{children:"move the ability classes"})," from the plugin source folder:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Plugins/GameplayInteraction/Source/GameplayInteraction/Public/Core/Abilities\n"})}),(0,r.jsxs)(n.p,{children:["into your ",(0,r.jsx)(n.strong,{children:"project source directory"})," where you have your own abilities."]}),(0,r.jsx)(n.p,{children:"Alternatively, you can:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Copy the ability classes"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rename them"})," appropriately in your project"]}),"\n",(0,r.jsx)(n.li,{children:"Use these copies instead of referencing the original plugin ability classes"}),"\n"]}),(0,r.jsx)(n.p,{children:"This approach is especially useful if:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You have your ",(0,r.jsx)(n.strong,{children:"own subclass"})," of ",(0,r.jsx)(n.code,{children:"UGameplayAbility"})]}),"\n",(0,r.jsxs)(n.li,{children:["You want your abilities to ",(0,r.jsx)(n.strong,{children:"work consistently"})," with your project-specific code"]}),"\n",(0,r.jsxs)(n.li,{children:["You want to ",(0,r.jsx)(n.strong,{children:"avoid reparenting"})," plugin classes directly, which often leads to circular dependencies and other complications"]}),"\n"]}),(0,r.jsx)(n.p,{children:"By using your own project-local versions of the abilities, you ensure better integration and avoid tight coupling with the plugin."})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"After setting up the required code in your IDE, you will need to recompile the source code while the editor is closed."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-10-setting-up-interaction-and-interactive-entities-for-testing",children:"Step 10: Setting up interaction and interactive entities for testing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["First you will need to add ",(0,r.jsx)(n.code,{children:"W_Interaction_Indicator"})," (or ",(0,r.jsx)(n.code,{children:"W_Interaction"})," in older versions) widget to your main HUD widget which you can find the in plugins content ",(0,r.jsx)(n.code,{children:"UI"})," folder (the widget is usually placed in the center with an offset)."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Make sure this ",(0,r.jsx)(n.code,{children:"W_Interaction_Indicator"})," widget is initially invisible. It should become visible when there is an interactive entity in the player view."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you have ",(0,r.jsx)(n.strong,{children:"ability sets"})," set up in your project, you should add ",(0,r.jsx)(n.strong,{children:"two abilities"})," to your ability set:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GA_Interact"}),(0,r.jsx)(n.br,{}),"\n","This ability needs to be activated ",(0,r.jsx)(n.strong,{children:"immediately"})," when the player spawns or on BeginPlay."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GA_ShowInteractionOptions"}),(0,r.jsx)(n.br,{}),"\n","This ability should be activated ",(0,r.jsx)(n.strong,{children:"on demand"}),", whenever interaction options are needed."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"You can manually grant and activate these abilities using the following functions:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GiveAbilityAndActivateOnce"})," for ",(0,r.jsx)(n.strong,{children:"GA_Interact"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GiveAbility"})," for ",(0,r.jsx)(n.strong,{children:"GA_ShowInteractionOptions"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You should configure input mappings for each ability by assigning them to specific gameplay tags.",(0,r.jsx)(n.br,{}),"\n","It is ",(0,r.jsx)(n.strong,{children:"highly recommended"})," to use ability sets to manage this because:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Input tags are ",(0,r.jsx)(n.strong,{children:"bound in C++"})," when granting abilities."]}),"\n",(0,r.jsx)(n.li,{children:"Using ability sets avoids issues related to input binding and activation."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the ",(0,r.jsx)(n.strong,{children:"Unify demo project"})," for an example on how to properly set this up."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Final Setup in Character Blueprint"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Add your ",(0,r.jsx)(n.strong,{children:"Input Config"})," asset to the character blueprint."]}),"\n",(0,r.jsxs)(n.li,{children:["Add your ",(0,r.jsx)(n.strong,{children:"Ability Set"})," asset to the character blueprint (if you have ability sets configured)."]}),"\n",(0,r.jsx)(n.li,{children:"Configure your input mapping context, and add the input actions to it for the interaction system."}),"\n",(0,r.jsx)(n.li,{children:"Ensure everything is properly configured/referenced and initialized."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-11-place-an-interactive-entity-in-the-level-for-testing",children:"Step 11: Place an Interactive Entity in the Level for Testing"}),"\n",(0,r.jsx)(n.p,{children:"Place your interactive entity in the level to test the interaction system."}),"\n",(0,r.jsxs)(n.p,{children:["You can use one of the premade presets or interactive entities available in the plugin content folder:\r\n",(0,r.jsx)(n.code,{children:"Content/Entities"})]}),"\n",(0,r.jsx)(n.p,{children:"Simply drag and drop an entity from there into your level."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Now, press ",(0,r.jsx)(n.strong,{children:"Play"}),", approach the entity, and look at it.",(0,r.jsx)(n.br,{}),"\n","You should see the possible interaction options appear."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Image",src:e(4012).A+"",width:"1812",height:"843"}),"\r\n",(0,r.jsx)(n.img,{alt:"Image",src:e(6663).A+"",width:"1761",height:"841"})]}),"\n",(0,r.jsx)(n.p,{children:"Try interacting with the entity to test the system and verify that it works as expected."})]})}function y(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(p,{...t})}):p(t)}},4012:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gi_ingame_01-921be4a4a5ac45fa7bf3783dbdb08177.png"},6663:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gi_ingame_02-f0cd1ac746394b010db94cb85e1e6730.png"},7814:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-01-0112a8a033260f6ebeb085d5b0d7bd98.png"},9021:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-02-87d5db6167df6fb963a1e4adb0446ddc.png"},7892:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-03-8bb77cc18cf59c4ef62d3d6c23401e6e.png"},7803:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-04-bf97fa57de6b4d5a5dc842a6964b22c6.png"},7298:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-05-afb5afcabcae8e1d9f6a02f30db55877.png"},233:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-06-566562503fd59970893d6d1bde329110.png"},3984:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-07-f26d455809f596e2cd4eb39fe68d6ed8.png"},343:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-08-7538ca797cfb36a85d8e52132428d878.png"},846:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-09-1139ac9173f3a0f07b0eac1ff9c2fa0e.png"},228:(t,n,e)=>{e.d(n,{A:()=>i});const i=e.p+"assets/images/gip-setup-10-96bc03bf7b21be8919da01cc4a512f1c.png"},8453:(t,n,e)=>{e.d(n,{R:()=>l,x:()=>o});var i=e(6540);const r={},a=i.createContext(r);function l(t){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:l(t.components),i.createElement(a.Provider,{value:n},t.children)}}}]);