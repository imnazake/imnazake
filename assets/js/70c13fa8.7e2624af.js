"use strict";(self.webpackChunknazake=self.webpackChunknazake||[]).push([[4870],{9930:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"unreal-editor-folder-structure","metadata":{"permalink":"/imnazake/blog/unreal-editor-folder-structure","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-01-editor-folder-structure.md","source":"@site/blog/2025-01-01-editor-folder-structure.md","title":"Clean Folder Structure (Editor)","description":"A maintainable content folder structure for Unreal Engine projects that scales with solo and team development.","date":"2025-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"UnrealEngine","permalink":"/imnazake/blog/tags/ue","description":"Unreal Engine"},{"inline":false,"label":"Editor","permalink":"/imnazake/blog/tags/editor","description":"Editor"},{"inline":false,"label":"Structure","permalink":"/imnazake/blog/tags/structure","description":"Structure"},{"inline":false,"label":"Blueprints","permalink":"/imnazake/blog/tags/bp","description":"Blueprints"}],"readingTime":2.59,"hasTruncateMarker":false,"authors":[{"name":"Nazake","title":"Game Developer","url":"https://github.com/imnazake","page":{"permalink":"/imnazake/blog/authors/nazake"},"socials":{"x":"https://x.com/imnazake","github":"https://github.com/imnazake"},"imageURL":"https://github.com/imnazake.png","key":"nazake"}],"frontMatter":{"title":"Clean Folder Structure (Editor)","description":"A maintainable content folder structure for Unreal Engine projects that scales with solo and team development.","authors":"nazake","tags":["ue","editor","structure","blueprints"],"slug":"unreal-editor-folder-structure","date":"2025-01-01T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Clean Folder Structure (IDE)","permalink":"/imnazake/blog/unreal-cpp-folder-structure"}},"content":"Organizing your Unreal Engine project is one of the most underrated things you can do to stay productive and avoid chaos as your game grows.\\r\\n\\r\\nHere\u2019s a **clean and maintainable folder structure** that works great for both solo developers and teams. It\u2019s battle-tested and follows industry best practices.\\r\\n\\r\\n---\\r\\n\\r\\n## \ud83d\udcc1 Folder Structure\\r\\n\\r\\nThis goes inside your **`Content`** folder:\\r\\n\\r\\n```plaintext\\r\\nContent/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Art/\\r\\n\u2502   \u251c\u2500\u2500 Characters/\\r\\n\u2502   \u251c\u2500\u2500 Environments/\\r\\n\u2502   \u251c\u2500\u2500 Props/\\r\\n\u2502   \u2514\u2500\u2500 UI/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Blueprints/\\r\\n\u2502   \u251c\u2500\u2500 Characters/\\r\\n\u2502   \u251c\u2500\u2500 Controllers/\\r\\n\u2502   \u251c\u2500\u2500 GameModes/\\r\\n\u2502   \u251c\u2500\u2500 Interfaces/\\r\\n\u2502   \u251c\u2500\u2500 Widgets/\\r\\n\u2502   \u2514\u2500\u2500 Misc/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Maps/\\r\\n\u2502   \u251c\u2500\u2500 MainMenu/\\r\\n\u2502   \u251c\u2500\u2500 Levels/\\r\\n\u2502   \u2514\u2500\u2500 Testing/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Materials/\\r\\n\u2502   \u251c\u2500\u2500 Master/\\r\\n\u2502   \u251c\u2500\u2500 Instances/\\r\\n\u2502   \u251c\u2500\u2500 Functions/\\r\\n\u2502   \u2514\u2500\u2500 Textures/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Meshes/\\r\\n\u2502   \u251c\u2500\u2500 Characters/\\r\\n\u2502   \u251c\u2500\u2500 Environments/\\r\\n\u2502   \u251c\u2500\u2500 Props/\\r\\n\u2502   \u2514\u2500\u2500 Vehicles/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Animations/\\r\\n\u2502   \u251c\u2500\u2500 Characters/\\r\\n\u2502   \u251c\u2500\u2500 Montages/\\r\\n\u2502   \u2514\u2500\u2500 Blendspaces/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Audio/\\r\\n\u2502   \u251c\u2500\u2500 Music/\\r\\n\u2502   \u251c\u2500\u2500 SFX/\\r\\n\u2502   \u2514\u2500\u2500 VO/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 UI/\\r\\n\u2502   \u251c\u2500\u2500 Widgets/\\r\\n\u2502   \u251c\u2500\u2500 Fonts/\\r\\n\u2502   \u2514\u2500\u2500 Textures/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 FX/\\r\\n\u2502   \u251c\u2500\u2500 Particles/\\r\\n\u2502   \u251c\u2500\u2500 Niagara/\\r\\n\u2502   \u2514\u2500\u2500 Decals/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Core/\\r\\n\u2502   \u251c\u2500\u2500 DataAssets/\\r\\n\u2502   \u251c\u2500\u2500 Enums/\\r\\n\u2502   \u251c\u2500\u2500 Structs/\\r\\n\u2502   \u2514\u2500\u2500 Functions/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Game/\\r\\n\u2502   \u251c\u2500\u2500 Abilities/\\r\\n\u2502   \u251c\u2500\u2500 Inventory/\\r\\n\u2502   \u251c\u2500\u2500 Items/\\r\\n\u2502   \u251c\u2500\u2500 Weapons/\\r\\n\u2502   \u2514\u2500\u2500 Mechanics/\\r\\n\u2502\\r\\n\u2514\u2500\u2500 Dev/\\r\\n    \u251c\u2500\u2500 [YourName]/\\r\\n    \u2514\u2500\u2500 Sandbox/\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## \ud83e\udde0 Breakdown\\r\\n\\r\\n### Art\\r\\nExternal content and artist-friendly folders. Put concept art, references, and high-poly models here.\\r\\n\\r\\n### Blueprints\\r\\nYour game\u2019s logic brain. Divide by type \u2014 characters, controllers, widgets, etc.\\r\\n\\r\\n### Maps\\r\\nMain levels, test levels, and menus \u2014 all organized for clarity.\\r\\n\\r\\n### Materials\\r\\nSplit between `Master`, `Instances`, and `Functions` to make scaling easier.\\r\\n\\r\\n### Meshes\\r\\nStatic Meshes and Skeletal Meshes. Organized by category like environment or props.\\r\\n\\r\\n### Animations\\r\\nKeep blendspaces, montages, and sequences tidy by character or category.\\r\\n\\r\\n### Audio\\r\\nSeparate voice lines, SFX, and music for easy audio pipeline control.\\r\\n\\r\\n### UI\\r\\nWidgets, textures, and fonts for HUDs, menus, and UI elements.\\r\\n\\r\\n### FX\\r\\nVisual effects, particle systems, and decals go here \u2014 use Niagara for future-proofing.\\r\\n\\r\\n### Core\\r\\nGame-wide systems like enums, structs, utility functions, and DataAssets.\\r\\n\\r\\n### Game\\r\\nGameplay logic: abilities (GAS), inventory, items, weapons, etc.\\r\\n\\r\\n### Dev\\r\\nFor developer sandboxes, experiments, and WIP content \u2014 keep it outside your shipping build.\\r\\n\\r\\n---\\r\\n\\r\\n## \u270d\ufe0f Naming Conventions\\r\\n\\r\\n- Blueprints: `BP_` (e.g. `BP_PlayerCharacter`)\\r\\n- Widgets: `WBP_` (e.g. `WBP_InventoryMenu`)\\r\\n- Materials: `M_`, `MI_` (Material Instance), `MF_` (Function)\\r\\n- Static Meshes: `SM_`, Skeletal Meshes: `SK_`\\r\\n- Sounds: `SFX_`, `BGM_`, `VO_`\\r\\n- Animations: `AS_` (AnimSequence), `AM_` (AnimMontage), `BS_` (Blendspace)\\r\\n\\r\\n---\\r\\n\\r\\n## \u2705 Best Practices\\r\\n\\r\\n- Use **Editor Utility Widgets** to automate organization and bulk operations.\\r\\n- Consider **feature plugins** if you\'re building large modular systems.\\r\\n- Keep `Dev/` out of version control or builds.\\r\\n- Clean unused assets regularly using the reference viewer.\\r\\n\\r\\n---\\r\\n\\r\\nA well-structured project makes debugging easier, improves iteration speed, and reduces onboarding time for collaborators. Set it up right from the start \u2014 future you will thank you.\\r\\n\\r\\nGot a better structure or plugin-friendly setup? Drop it in the comments!\\r\\n\\r\\n---"},{"id":"unreal-cpp-folder-structure","metadata":{"permalink":"/imnazake/blog/unreal-cpp-folder-structure","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-01-ide-folder-structure.md","source":"@site/blog/2025-01-01-ide-folder-structure.md","title":"Clean Folder Structure (IDE)","description":"A scalable C++ source folder structure for Unreal Engine that supports both solo and team development workflows.","date":"2025-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"UnrealEngine","permalink":"/imnazake/blog/tags/ue","description":"Unreal Engine"},{"inline":false,"label":"IDE","permalink":"/imnazake/blog/tags/ide","description":"IDE"},{"inline":false,"label":"Structure","permalink":"/imnazake/blog/tags/structure","description":"Structure"},{"inline":false,"label":"C++","permalink":"/imnazake/blog/tags/cpp","description":"C++"}],"readingTime":3.47,"hasTruncateMarker":false,"authors":[{"name":"Nazake","title":"Game Developer","url":"https://github.com/imnazake","page":{"permalink":"/imnazake/blog/authors/nazake"},"socials":{"x":"https://x.com/imnazake","github":"https://github.com/imnazake"},"imageURL":"https://github.com/imnazake.png","key":"nazake"}],"frontMatter":{"title":"Clean Folder Structure (IDE)","description":"A scalable C++ source folder structure for Unreal Engine that supports both solo and team development workflows.","authors":"nazake","tags":["ue","ide","structure","c++"],"slug":"unreal-cpp-folder-structure","date":"2025-01-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Clean Folder Structure (Editor)","permalink":"/imnazake/blog/unreal-editor-folder-structure"}},"content":"Unreal Engine\'s default C++ folder layout works, but it quickly becomes a mess as your game grows. A well-structured `Source/` folder can save hours of debugging and onboarding headaches.\\r\\n\\r\\nHere\u2019s a **clean and modular C++ folder structure** that scales with solo and team development.\\r\\n\\r\\n---\\r\\n\\r\\n## \ud83d\udcc1 Folder Structure\\r\\n\\r\\nThis goes inside your **`Source/YourProject`** directory:\\r\\n\\r\\n```plaintext\\r\\nSource/YourProject/\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Core/\\r\\n\u2502   \u251c\u2500\u2500 YourProject.h           \\r\\n\u2502   \u251c\u2500\u2500 YourProject.cpp\\r\\n\u2502   \u251c\u2500\u2500 LogChannels.h             # Centralized log categories\\r\\n\u2502   \u2514\u2500\u2500 Utility/                  # Macros, helpers, common utilities\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Game/\\r\\n\u2502   \u251c\u2500\u2500 GameMode/                 # GameMode classes\\r\\n\u2502   \u251c\u2500\u2500 GameState/                # GameState classes\\r\\n\u2502   \u251c\u2500\u2500 Player/                   # Player-specific logic\\r\\n\u2502   \u2502   \u251c\u2500\u2500 PlayerCharacter/\\r\\n\u2502   \u2502   \u251c\u2500\u2500 PlayerController/\\r\\n\u2502   \u2502   \u2514\u2500\u2500 PlayerState/\\r\\n\u2502   \u2514\u2500\u2500 HUD/                     # HUD/UI related to gameplay\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Systems/                     # Self-contained gameplay systems\\r\\n\u2502   \u251c\u2500\u2500 Inventory/               # Inventory system implementation\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventorySystem              # Core system classes\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventoryComponents          # Component(s) related to inventory\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventoryEnums               # Enums used by inventory system\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventoryStructs             # Structs and data structures\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventoryDataAssets          # UDataAsset definitions\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InventoryInterfaces          # Interfaces used by inventory system\\r\\n\u2502   \u2502   \u2514\u2500\u2500 [Other inventory-related files]\\r\\n\u2502   \u2502\\r\\n\u2502   \u251c\u2500\u2500 Abilities/               # Gameplay abilities system\\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilitySystem \\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilityComponents \\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilityEnums\\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilityStructs\\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilityDataAsset\\r\\n\u2502   \u2502   \u251c\u2500\u2500 AbilityInterfaces\\r\\n\u2502   \u2502   \u2514\u2500\u2500 [Other ability-related files]\\r\\n\u2502   \u2502\\r\\n\u2502   \u251c\u2500\u2500 Interaction/            # Player or world interaction system\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InteractionSystem \\r\\n\u2502   \u2502   \u251c\u2500\u2500 InteractionComponents\\r\\n\u2502   \u2502   \u251c\u2500\u2500 InteractionEnums \\r\\n\u2502   \u2502   \u251c\u2500\u2500 InteractionStructs \\r\\n\u2502   \u2502   \u251c\u2500\u2500 InteractionInterfaces\\r\\n\u2502   \u2502   \u2514\u2500\u2500 [Other interaction files]\\r\\n\u2502   \u2502\\r\\n\u2502   \u2514\u2500\u2500 [Other systems\u2026]\\r\\n\u2502\\r\\n\u251c\u2500\u2500 UI/\\r\\n\u2502   \u251c\u2500\u2500 Widgets/                # UUserWidget classes\\r\\n\u2502   \u2514\u2500\u2500 Data/                   # UI-related data assets and enums etc...\\r\\n\u2502\\r\\n\u251c\u2500\u2500 Dev/                       # Temporary/testing/experimental code\\r\\n\u2502   \u2514\u2500\u2500 Sandbox/\\r\\n\u2502\\r\\n\u2514\u2500\u2500 YourProject.Build.cs        # Build configuration file\\r\\n\\r\\n```\\r\\n\\r\\n## \ud83e\udde0 Breakdown\\r\\n\\r\\n### Core\\r\\nCore headers, macros, and logging config. Usually where your precompiled header (`YourProject.h`) and main module file (`YourProject.cpp`) live.\\r\\nContains utilities and helper functions common across your entire project.\\r\\n\\r\\n### Game\\r\\nAll player-related gameplay logic \u2014 `GameMode`, `GameState`, `HUD`s, and player-specific logic like characters or controllers.\\r\\nHandles gameplay flow, rules, and player input management.\\r\\n\\r\\n### Systems\\r\\nSelf-contained gameplay systems that encapsulate specific game mechanics. Designed to be modular for reuse or plugin conversion.\\r\\n\\r\\n- Inventory\\r\\nImplements all inventory-related features: core systems, components for inventory management, enums for item types or states, data structures for item definitions, UDataAssets for configurable data, and interfaces for interaction contracts.\\r\\n\\r\\n- Abilities\\r\\nManages gameplay abilities including the ability system core, ability-related components, enums, structs, data assets, and interfaces to define ability behaviors and effects.\\r\\n\\r\\n- Interaction\\r\\nHandles player or world interaction systems: interaction logic, components, enums to define interaction types, data structs, and interfaces to implement consistent interaction contracts.\\r\\n\\r\\n- Other systems\\r\\nAdd more gameplay systems as needed, following the same modular structure.\\r\\n\\r\\n### UI\\r\\nContains your `UUserWidget` C++ classes and any supporting UI logic or data (e.g. data tables, UI enums).\\r\\n\\r\\n- **Widgets:** All UUserWidget subclasses for HUD elements, menus, and UI components.\\r\\n- **Data:** UI-related data assets, enums, and supporting structures.\\r\\n\\r\\n### Dev\\r\\nTemporary or experimental code and sandbox tests. Useful for prototyping and development without affecting production code. Should be excluded from shipping builds.\\r\\n\\r\\n---\\r\\n\\r\\n## \u270d\ufe0f Naming Conventions\\r\\n\\r\\nStick to Unreal\u2019s coding standards but you can adopt slight variations for clarity:\\r\\n\\r\\n- **Classes:** `U`, `A`, `F`, `I` prefixes (e.g. `UUserWidget`, `AEnemy`, `FItemData`, `IInteractable`)\\r\\n- **Components:** `UYourProject[Name]Component` (e.g. `UYourProjectHealthComponent`)\\r\\n- **Systems:** Folder-level prefixes like `Inventory/`, `Abilities/`, etc.\\r\\n- **Log Categories:** Use a centralized `LogChannels.h`\\r\\n\\r\\n---\\r\\n\\r\\n## \u2705 Best Practices\\r\\n\\r\\n- **1 class per file:** Avoid multiple classes in one file unless nested or private.\\r\\n- **Minimal header includes:** Use forward declarations where possible.\\r\\n- **Feature folder plugins:** For even better separation, migrate systems into [feature plugins](https://docs.unrealengine.com/en-US/creating-and-managing-plugins-in-unreal-engine/) over time.\\r\\n- **Avoid circular dependencies:** Especially between systems \u2014 use interfaces or weak references.\\r\\n\\r\\n---\\r\\n\\r\\nA clean C++ folder structure reduces confusion, speeds up compile times, and helps new developers (or future you) navigate the codebase with confidence.\\r\\n\\r\\nGot your own folder strategy or engine module setup? Share it in the comments!"}]}}')}}]);