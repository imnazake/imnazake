"use strict";(self.webpackChunknazake=self.webpackChunknazake||[]).push([[9725],{1547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"gameplay-interaction/creating-new-interactive-entities","title":"Creating New Interactive Entities","description":"This guide walks you through the process of creating and configuring Interactive Entities for the Gameplay Interaction Plugin.","source":"@site/docs/gameplay-interaction/creating-new-interactive-entities.md","sourceDirName":"gameplay-interaction","slug":"/gameplay-interaction/creating-new-interactive-entities","permalink":"/imnazake/docs/gameplay-interaction/creating-new-interactive-entities","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gameplay-interaction/creating-new-interactive-entities.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Setup","permalink":"/imnazake/docs/gameplay-interaction/setup"},"next":{"title":"Creating New Interaction Abilities","permalink":"/imnazake/docs/gameplay-interaction/creating-new-interaction-abilities"}}');var r=t(4848),o=t(8453);const a={sidebar_position:3},s="Creating New Interactive Entities",c={},l=[{value:"1. <strong>Inherit from <code>AInteractiveEntity</code></strong>",id:"1-inherit-from-ainteractiveentity",level:2},{value:"2. <strong>Use Your Own Actor + Interfaces (C++ Only)</strong>",id:"2-use-your-own-actor--interfaces-c-only",level:2},{value:"3. Configure Your Interactive Entity",id:"3-configure-your-interactive-entity",level:2},{value:"4. Configure Mesh Collision Settings for Interaction",id:"4-configure-mesh-collision-settings-for-interaction",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"creating-new-interactive-entities",children:"Creating New Interactive Entities"})}),"\n",(0,r.jsxs)(n.p,{children:["This guide walks you through the process of creating and configuring ",(0,r.jsx)(n.strong,{children:"Interactive Entities"})," for the ",(0,r.jsx)(n.strong,{children:"Gameplay Interaction Plugin"}),".\r\nCreate new actors for players to interact with easily."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"There are two ways to create interactive entities in your game:"}),"\n",(0,r.jsxs)(n.h2,{id:"1-inherit-from-ainteractiveentity",children:["1. ",(0,r.jsxs)(n.strong,{children:["Inherit from ",(0,r.jsx)(n.code,{children:"AInteractiveEntity"})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You can create a new interactive entity by inheriting from the ",(0,r.jsx)(n.code,{children:"AInteractiveEntity"})," actor that comes with the plugin."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a new Blueprint or C++ class based on ",(0,r.jsx)(n.code,{children:"AInteractiveEntity"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"In your actor Blueprint, add meshes or visuals to design your entity."}),"\n",(0,r.jsxs)(n.li,{children:["To enable outline drawing, override the following methods:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SupportsDrawingOutline"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"DrawOutline"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"RemoveOutline"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Call ",(0,r.jsx)(n.code,{children:"SetRenderCustomDepth(true/false)"})," on the meshes you want to highlight or remove highlight with outlines."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"2-use-your-own-actor--interfaces-c-only",children:["2. ",(0,r.jsx)(n.strong,{children:"Use Your Own Actor + Interfaces (C++ Only)"})]}),"\n",(0,r.jsx)(n.p,{children:"If you'd like to convert your own actor into an interactive entity, implement the following interfaces in C++:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"IOutlineDrawingEntityInterface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"IGameplayInteractiveEntityInterface"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's a full example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "GameplayTagContainer.h"\r\n#include "IOutlineDrawingEntityInterface.h"\r\n#include "Core/GameplayInteractionLibrary.h"\r\n#include "Core/IGameplayInteractiveEntityInterface.h"\r\n#include "Core/GameplayEntityInteractionComponent.h"\r\n\r\nclass UAbilitySystemComponent;\r\nclass UGameplayInteractionOptions;\r\n\r\nUCLASS(Blueprintable, BlueprintType)\r\nclass GAMEPLAYINTERACTION_API AMyOwnActor : public AActor, public IOutlineDrawingEntityInterface, public IGameplayInteractiveEntityInterface\r\n{\r\n    GENERATED_BODY()\r\n\r\npublic:\r\n\r\n    AMyOwnActor(const FObjectInitializer& ObjectInitializer);\r\n\r\n    virtual void DrawOutline_Implementation() const override;\r\n    virtual void RemoveOutline_Implementation() const override;\r\n    virtual bool SupportsDrawingOutline_Implementation() const override;\r\n\r\n    UFUNCTION(BlueprintPure, Category = "Entity")\r\n    virtual UGameplayInteractionOptions* GetInteractionOptions() override;\r\n\r\n    UFUNCTION(BlueprintPure, Category = "Entity")\r\n    virtual UGameplayEntityInteractionComponent* GetInteractionComponent() override;\r\n\r\n    UFUNCTION(BlueprintPure, Category = "Entity")\r\n    virtual bool CanInteract(UAbilitySystemComponent* Player, FGameplayTagContainer& FailureTags) override;\r\n\r\n    UFUNCTION(BlueprintPure, Category = "Entity")\r\n    FGameplayInteractionOption GetInteractionOptionByIndex(int32 OptionIndex);\r\n\r\nprotected:\r\n\r\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Entity")\r\n    TObjectPtr<UGameplayEntityInteractionComponent> InteractionComponent;\r\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'AMyOwnActor::AMyOwnActor(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\r\n{\r\n    bReplicates = true;\r\n    SetReplicatingMovement(true);\r\n    bReplicateUsingRegisteredSubObjectList = true;\r\n\r\n    InteractionComponent = CreateDefaultSubobject<UGameplayEntityInteractionComponent>(TEXT("InteractionComponent"));\r\n    InteractionComponent->SetIsReplicated(true);\r\n}\r\n\r\nvoid AMyOwnActor::DrawOutline_Implementation() const\r\n{\r\n    // Define which meshes should display outlines.\r\n}\r\n\r\nvoid AMyOwnActor::RemoveOutline_Implementation() const\r\n{\r\n    // Remove outlines from the defined meshes.\r\n}\r\n\r\nbool AMyOwnActor::SupportsDrawingOutline_Implementation() const\r\n{\r\n    return true;\r\n}\r\n\r\nUGameplayInteractionOptions* AMyOwnActor::GetInteractionOptions()\r\n{\r\n    return InteractionComponent->GetInteractionOptions();\r\n}\r\n\r\nUGameplayEntityInteractionComponent* AMyOwnActor::GetInteractionComponent()\r\n{\r\n    return InteractionComponent;\r\n}\r\n\r\nbool AMyOwnActor::CanInteract(UAbilitySystemComponent* Player, FGameplayTagContainer& FailureTags)\r\n{\r\n    return InteractionComponent->CanInteract(Player, FailureTags);\r\n}\r\n\r\nFGameplayInteractionOption AMyOwnActor::GetInteractionOptionByIndex(const int32 OptionIndex)\r\n{\r\n    if (!InteractionComponent->GetInteractionOptions())\r\n    {\r\n        return FGameplayInteractionOption::EmptyOption;\r\n    }\r\n\r\n    const TArray<FGameplayInteractionOption>& Options = InteractionComponent->GetInteractionOptions()->GetOptions();\r\n\r\n    if (Options.IsValidIndex(OptionIndex))\r\n    {\r\n        return Options[OptionIndex];\r\n    }\r\n\r\n    return FGameplayInteractionOption::EmptyOption;\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-configure-your-interactive-entity",children:"3. Configure Your Interactive Entity"}),"\n",(0,r.jsx)(n.p,{children:"After adding meshes and visuals to your interactive actor:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Select the ",(0,r.jsx)(n.code,{children:"InteractionComponent"})]})," in the Details panel."]}),"\n",(0,r.jsxs)(n.li,{children:["Choose an ",(0,r.jsx)(n.strong,{children:"Interaction Policy"})," that matches the desired behavior (e.g., Default, Specific Number Of Players, Specific Players)."]}),"\n",(0,r.jsxs)(n.li,{children:["Under the component settings, ",(0,r.jsx)(n.strong,{children:"assign the interaction options"})," that will be granted to the player when they approach or interact."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The table below outlines the available ",(0,r.jsx)(n.strong,{children:"Interaction Policies"})," you can assign to an interactive entity."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Policy Name"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Notes"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Default"})}),(0,r.jsx)(n.td,{children:"Unlimited interactions; any player can interact at any time without restrictions."}),(0,r.jsx)(n.td,{children:"No special handling required."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SpecificNumberOfPlayers"})}),(0,r.jsx)(n.td,{children:"Allows a limited number of players to interact simultaneously, as specified in the component settings."}),(0,r.jsx)(n.td,{children:"Players beyond the limit must wait until others finish interacting."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SpecificPlayers"})}),(0,r.jsxs)(n.td,{children:["Only specific players can interact based on their ",(0,r.jsx)(n.code,{children:"UniqueNetId"}),"."]}),(0,r.jsxs)(n.td,{children:["Use ",(0,r.jsx)(n.code,{children:"RegisterPlayerForInteraction"})," and ",(0,r.jsx)(n.code,{children:"UnregisterPlayerFromInteraction"})," ",(0,r.jsx)(n.strong,{children:"on the server"})," to control access. If removing an active interactor, call ",(0,r.jsx)(n.code,{children:"FinishInteraction"}),"."]})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Important"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RegisterPlayerForInteraction"})," and ",(0,r.jsx)(n.code,{children:"UnregisterPlayerFromInteraction"})," must be called ",(0,r.jsx)(n.strong,{children:"on the authority/server only"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If you unregister a player currently interacting, ",(0,r.jsxs)(n.strong,{children:["call ",(0,r.jsx)(n.code,{children:"FinishInteraction"})]})," to cleanly end their interaction state."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["You can also create custom interaction policies by inheriting from the ",(0,r.jsx)(n.code,{children:"UGameplayInteractionPolicy"})," C++ class.\r\nThis allows you to implement custom rules and behavior for interaction access, tailored to your game\u2019s specific needs."]})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["To create a new interaction options asset, refer to ",(0,r.jsx)(n.a,{href:"creating-new-interaction-options",children:"this page"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-configure-mesh-collision-settings-for-interaction",children:"4. Configure Mesh Collision Settings for Interaction"}),"\n",(0,r.jsx)(n.p,{children:"Make sure the correct meshes are setup to handle player interaction:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Select the ",(0,r.jsx)(n.strong,{children:"mesh(es)"})," you want the player to interact with (e.g., a door mesh)."]}),"\n",(0,r.jsxs)(n.li,{children:["Set their ",(0,r.jsx)(n.strong,{children:"collision preset"})," to:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Interaction"})," (recommended), or"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Custom"})," and configure manually:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.strong,{children:"Object Type"})," to ",(0,r.jsx)(n.code,{children:"InteractiveEntity"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure the ",(0,r.jsx)(n.strong,{children:"InteractiveEntity"})," collision response is set to ",(0,r.jsx)(n.strong,{children:"Block"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Disable collision for other unused channels, if needed."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udccc This ensures the interaction trace system can detect the mesh when the player looks at it."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Refer to the image below for an example collision setup."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Image",src:t(2657).A+"",width:"1916",height:"923"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"With either approach, you'll have full control over how your interactive entities look, behave, and react to player interaction."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},2657:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/gi_coll_settings-48a13887919643ebb00e2b0b4ddab7cd.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);