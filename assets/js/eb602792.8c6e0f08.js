"use strict";(self.webpackChunknazake=self.webpackChunknazake||[]).push([[1436],{4340:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var s=r(2370),t=r(4848),i=r(8453);const a={title:"Clean Folder Structure (Editor)",description:"A maintainable content folder structure for Unreal Engine projects that scales with solo and team development.",authors:"nazake",tags:["ue","editor","structure","blueprints"],slug:"unreal-editor-folder-structure",date:new Date("2025-01-01T00:00:00.000Z")},l=void 0,o={authorsImageUrls:[void 0]},d=[{value:"\ud83d\udcc1 Folder Structure",id:"-folder-structure",level:2},{value:"\ud83e\udde0 Breakdown",id:"-breakdown",level:2},{value:"Art",id:"art",level:3},{value:"Blueprints",id:"blueprints",level:3},{value:"Maps",id:"maps",level:3},{value:"Materials",id:"materials",level:3},{value:"Meshes",id:"meshes",level:3},{value:"Animations",id:"animations",level:3},{value:"Audio",id:"audio",level:3},{value:"UI",id:"ui",level:3},{value:"FX",id:"fx",level:3},{value:"Core",id:"core",level:3},{value:"Game",id:"game",level:3},{value:"Dev",id:"dev",level:3},{value:"\u270d\ufe0f Naming Conventions",id:"\ufe0f-naming-conventions",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Organizing your Unreal Engine project is one of the most underrated things you can do to stay productive and avoid chaos as your game grows."}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s a ",(0,t.jsx)(n.strong,{children:"clean and maintainable folder structure"})," that works great for both solo developers and teams. It\u2019s battle-tested and follows industry best practices."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-folder-structure",children:"\ud83d\udcc1 Folder Structure"}),"\n",(0,t.jsxs)(n.p,{children:["This goes inside your ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Content"})})," folder:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"Content/\r\n\u2502\r\n\u251c\u2500\u2500 Art/\r\n\u2502   \u251c\u2500\u2500 Characters/\r\n\u2502   \u251c\u2500\u2500 Environments/\r\n\u2502   \u251c\u2500\u2500 Props/\r\n\u2502   \u2514\u2500\u2500 UI/\r\n\u2502\r\n\u251c\u2500\u2500 Blueprints/\r\n\u2502   \u251c\u2500\u2500 Characters/\r\n\u2502   \u251c\u2500\u2500 Controllers/\r\n\u2502   \u251c\u2500\u2500 GameModes/\r\n\u2502   \u251c\u2500\u2500 Interfaces/\r\n\u2502   \u251c\u2500\u2500 Widgets/\r\n\u2502   \u2514\u2500\u2500 Misc/\r\n\u2502\r\n\u251c\u2500\u2500 Maps/\r\n\u2502   \u251c\u2500\u2500 MainMenu/\r\n\u2502   \u251c\u2500\u2500 Levels/\r\n\u2502   \u2514\u2500\u2500 Testing/\r\n\u2502\r\n\u251c\u2500\u2500 Materials/\r\n\u2502   \u251c\u2500\u2500 Master/\r\n\u2502   \u251c\u2500\u2500 Instances/\r\n\u2502   \u251c\u2500\u2500 Functions/\r\n\u2502   \u2514\u2500\u2500 Textures/\r\n\u2502\r\n\u251c\u2500\u2500 Meshes/\r\n\u2502   \u251c\u2500\u2500 Characters/\r\n\u2502   \u251c\u2500\u2500 Environments/\r\n\u2502   \u251c\u2500\u2500 Props/\r\n\u2502   \u2514\u2500\u2500 Vehicles/\r\n\u2502\r\n\u251c\u2500\u2500 Animations/\r\n\u2502   \u251c\u2500\u2500 Characters/\r\n\u2502   \u251c\u2500\u2500 Montages/\r\n\u2502   \u2514\u2500\u2500 Blendspaces/\r\n\u2502\r\n\u251c\u2500\u2500 Audio/\r\n\u2502   \u251c\u2500\u2500 Music/\r\n\u2502   \u251c\u2500\u2500 SFX/\r\n\u2502   \u2514\u2500\u2500 VO/\r\n\u2502\r\n\u251c\u2500\u2500 UI/\r\n\u2502   \u251c\u2500\u2500 Widgets/\r\n\u2502   \u251c\u2500\u2500 Fonts/\r\n\u2502   \u2514\u2500\u2500 Textures/\r\n\u2502\r\n\u251c\u2500\u2500 FX/\r\n\u2502   \u251c\u2500\u2500 Particles/\r\n\u2502   \u251c\u2500\u2500 Niagara/\r\n\u2502   \u2514\u2500\u2500 Decals/\r\n\u2502\r\n\u251c\u2500\u2500 Core/\r\n\u2502   \u251c\u2500\u2500 DataAssets/\r\n\u2502   \u251c\u2500\u2500 Enums/\r\n\u2502   \u251c\u2500\u2500 Structs/\r\n\u2502   \u2514\u2500\u2500 Functions/\r\n\u2502\r\n\u251c\u2500\u2500 Game/\r\n\u2502   \u251c\u2500\u2500 Abilities/\r\n\u2502   \u251c\u2500\u2500 Inventory/\r\n\u2502   \u251c\u2500\u2500 Items/\r\n\u2502   \u251c\u2500\u2500 Weapons/\r\n\u2502   \u2514\u2500\u2500 Mechanics/\r\n\u2502\r\n\u2514\u2500\u2500 Dev/\r\n    \u251c\u2500\u2500 [YourName]/\r\n    \u2514\u2500\u2500 Sandbox/\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-breakdown",children:"\ud83e\udde0 Breakdown"}),"\n",(0,t.jsx)(n.h3,{id:"art",children:"Art"}),"\n",(0,t.jsx)(n.p,{children:"External content and artist-friendly folders. Put concept art, references, and high-poly models here."}),"\n",(0,t.jsx)(n.h3,{id:"blueprints",children:"Blueprints"}),"\n",(0,t.jsx)(n.p,{children:"Your game\u2019s logic brain. Divide by type \u2014 characters, controllers, widgets, etc."}),"\n",(0,t.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,t.jsx)(n.p,{children:"Main levels, test levels, and menus \u2014 all organized for clarity."}),"\n",(0,t.jsx)(n.h3,{id:"materials",children:"Materials"}),"\n",(0,t.jsxs)(n.p,{children:["Split between ",(0,t.jsx)(n.code,{children:"Master"}),", ",(0,t.jsx)(n.code,{children:"Instances"}),", and ",(0,t.jsx)(n.code,{children:"Functions"})," to make scaling easier."]}),"\n",(0,t.jsx)(n.h3,{id:"meshes",children:"Meshes"}),"\n",(0,t.jsx)(n.p,{children:"Static Meshes and Skeletal Meshes. Organized by category like environment or props."}),"\n",(0,t.jsx)(n.h3,{id:"animations",children:"Animations"}),"\n",(0,t.jsx)(n.p,{children:"Keep blendspaces, montages, and sequences tidy by character or category."}),"\n",(0,t.jsx)(n.h3,{id:"audio",children:"Audio"}),"\n",(0,t.jsx)(n.p,{children:"Separate voice lines, SFX, and music for easy audio pipeline control."}),"\n",(0,t.jsx)(n.h3,{id:"ui",children:"UI"}),"\n",(0,t.jsx)(n.p,{children:"Widgets, textures, and fonts for HUDs, menus, and UI elements."}),"\n",(0,t.jsx)(n.h3,{id:"fx",children:"FX"}),"\n",(0,t.jsx)(n.p,{children:"Visual effects, particle systems, and decals go here \u2014 use Niagara for future-proofing."}),"\n",(0,t.jsx)(n.h3,{id:"core",children:"Core"}),"\n",(0,t.jsx)(n.p,{children:"Game-wide systems like enums, structs, utility functions, and DataAssets."}),"\n",(0,t.jsx)(n.h3,{id:"game",children:"Game"}),"\n",(0,t.jsx)(n.p,{children:"Gameplay logic: abilities (GAS), inventory, items, weapons, etc."}),"\n",(0,t.jsx)(n.h3,{id:"dev",children:"Dev"}),"\n",(0,t.jsx)(n.p,{children:"For developer sandboxes, experiments, and WIP content \u2014 keep it outside your shipping build."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-naming-conventions",children:"\u270d\ufe0f Naming Conventions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Blueprints: ",(0,t.jsx)(n.code,{children:"BP_"})," (e.g. ",(0,t.jsx)(n.code,{children:"BP_PlayerCharacter"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Widgets: ",(0,t.jsx)(n.code,{children:"WBP_"})," (e.g. ",(0,t.jsx)(n.code,{children:"WBP_InventoryMenu"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Materials: ",(0,t.jsx)(n.code,{children:"M_"}),", ",(0,t.jsx)(n.code,{children:"MI_"})," (Material Instance), ",(0,t.jsx)(n.code,{children:"MF_"})," (Function)"]}),"\n",(0,t.jsxs)(n.li,{children:["Static Meshes: ",(0,t.jsx)(n.code,{children:"SM_"}),", Skeletal Meshes: ",(0,t.jsx)(n.code,{children:"SK_"})]}),"\n",(0,t.jsxs)(n.li,{children:["Sounds: ",(0,t.jsx)(n.code,{children:"SFX_"}),", ",(0,t.jsx)(n.code,{children:"BGM_"}),", ",(0,t.jsx)(n.code,{children:"VO_"})]}),"\n",(0,t.jsxs)(n.li,{children:["Animations: ",(0,t.jsx)(n.code,{children:"AS_"})," (AnimSequence), ",(0,t.jsx)(n.code,{children:"AM_"})," (AnimMontage), ",(0,t.jsx)(n.code,{children:"BS_"})," (Blendspace)"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"Editor Utility Widgets"})," to automate organization and bulk operations."]}),"\n",(0,t.jsxs)(n.li,{children:["Consider ",(0,t.jsx)(n.strong,{children:"feature plugins"})," if you're building large modular systems."]}),"\n",(0,t.jsxs)(n.li,{children:["Keep ",(0,t.jsx)(n.code,{children:"Dev/"})," out of version control or builds."]}),"\n",(0,t.jsx)(n.li,{children:"Clean unused assets regularly using the reference viewer."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"A well-structured project makes debugging easier, improves iteration speed, and reduces onboarding time for collaborators. Set it up right from the start \u2014 future you will thank you."}),"\n",(0,t.jsx)(n.p,{children:"Got a better structure or plugin-friendly setup? Drop it in the comments!"}),"\n",(0,t.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},2370:e=>{e.exports=JSON.parse('{"permalink":"/imnazake/blog/unreal-editor-folder-structure","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-01-editor-folder-structure.md","source":"@site/blog/2025-01-01-editor-folder-structure.md","title":"Clean Folder Structure (Editor)","description":"A maintainable content folder structure for Unreal Engine projects that scales with solo and team development.","date":"2025-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"UnrealEngine","permalink":"/imnazake/blog/tags/ue","description":"Unreal Engine"},{"inline":false,"label":"Editor","permalink":"/imnazake/blog/tags/editor","description":"Editor"},{"inline":false,"label":"Structure","permalink":"/imnazake/blog/tags/structure","description":"Structure"},{"inline":false,"label":"Blueprints","permalink":"/imnazake/blog/tags/bp","description":"Blueprints"}],"readingTime":2.59,"hasTruncateMarker":false,"authors":[{"name":"Nazake","title":"Game Developer","url":"https://github.com/imnazake","page":{"permalink":"/imnazake/blog/authors/nazake"},"socials":{"x":"https://x.com/imnazake","github":"https://github.com/imnazake"},"imageURL":"https://github.com/imnazake.png","key":"nazake"}],"frontMatter":{"title":"Clean Folder Structure (Editor)","description":"A maintainable content folder structure for Unreal Engine projects that scales with solo and team development.","authors":"nazake","tags":["ue","editor","structure","blueprints"],"slug":"unreal-editor-folder-structure","date":"2025-01-01T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Clean Folder Structure (IDE)","permalink":"/imnazake/blog/unreal-cpp-folder-structure"}}')}}]);