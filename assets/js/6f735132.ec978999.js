"use strict";(self.webpackChunknazake=self.webpackChunknazake||[]).push([[6576],{615:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var s=r(8046),t=r(4848),i=r(8453);const a={title:"Clean Folder Structure (IDE)",description:"A scalable C++ source folder structure for Unreal Engine that supports both solo and team development workflows.",authors:"nazake",tags:["ue","ide","structure","c++"],slug:"unreal-cpp-folder-structure",date:new Date("2025-01-01T00:00:00.000Z")},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"\ud83d\udcc1 Folder Structure",id:"-folder-structure",level:2},{value:"\ud83e\udde0 Breakdown",id:"-breakdown",level:2},{value:"Core",id:"core",level:3},{value:"Game",id:"game",level:3},{value:"Systems",id:"systems",level:3},{value:"UI",id:"ui",level:3},{value:"Dev",id:"dev",level:3},{value:"\u270d\ufe0f Naming Conventions",id:"\ufe0f-naming-conventions",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Unreal Engine's default C++ folder layout works, but it quickly becomes a mess as your game grows. A well-structured ",(0,t.jsx)(n.code,{children:"Source/"})," folder can save hours of debugging and onboarding headaches."]}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s a ",(0,t.jsx)(n.strong,{children:"clean and modular C++ folder structure"})," that scales with solo and team development."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-folder-structure",children:"\ud83d\udcc1 Folder Structure"}),"\n",(0,t.jsxs)(n.p,{children:["This goes inside your ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Source/YourProject"})})," directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"Source/YourProject/\r\n\u2502\r\n\u251c\u2500\u2500 Core/\r\n\u2502   \u251c\u2500\u2500 YourProject.h           \r\n\u2502   \u251c\u2500\u2500 YourProject.cpp\r\n\u2502   \u251c\u2500\u2500 LogChannels.h             # Centralized log categories\r\n\u2502   \u2514\u2500\u2500 Utility/                  # Macros, helpers, common utilities\r\n\u2502\r\n\u251c\u2500\u2500 Game/\r\n\u2502   \u251c\u2500\u2500 GameMode/                 # GameMode classes\r\n\u2502   \u251c\u2500\u2500 GameState/                # GameState classes\r\n\u2502   \u251c\u2500\u2500 Player/                   # Player-specific logic\r\n\u2502   \u2502   \u251c\u2500\u2500 PlayerCharacter/\r\n\u2502   \u2502   \u251c\u2500\u2500 PlayerController/\r\n\u2502   \u2502   \u2514\u2500\u2500 PlayerState/\r\n\u2502   \u2514\u2500\u2500 HUD/                     # HUD/UI related to gameplay\r\n\u2502\r\n\u251c\u2500\u2500 Systems/                     # Self-contained gameplay systems\r\n\u2502   \u251c\u2500\u2500 Inventory/               # Inventory system implementation\r\n\u2502   \u2502   \u251c\u2500\u2500 InventorySystem              # Core system classes\r\n\u2502   \u2502   \u251c\u2500\u2500 InventoryComponents          # Component(s) related to inventory\r\n\u2502   \u2502   \u251c\u2500\u2500 InventoryEnums               # Enums used by inventory system\r\n\u2502   \u2502   \u251c\u2500\u2500 InventoryStructs             # Structs and data structures\r\n\u2502   \u2502   \u251c\u2500\u2500 InventoryDataAssets          # UDataAsset definitions\r\n\u2502   \u2502   \u251c\u2500\u2500 InventoryInterfaces          # Interfaces used by inventory system\r\n\u2502   \u2502   \u2514\u2500\u2500 [Other inventory-related files]\r\n\u2502   \u2502\r\n\u2502   \u251c\u2500\u2500 Abilities/               # Gameplay abilities system\r\n\u2502   \u2502   \u251c\u2500\u2500 AbilitySystem \r\n\u2502   \u2502   \u251c\u2500\u2500 AbilityComponents \r\n\u2502   \u2502   \u251c\u2500\u2500 AbilityEnums\r\n\u2502   \u2502   \u251c\u2500\u2500 AbilityStructs\r\n\u2502   \u2502   \u251c\u2500\u2500 AbilityDataAsset\r\n\u2502   \u2502   \u251c\u2500\u2500 AbilityInterfaces\r\n\u2502   \u2502   \u2514\u2500\u2500 [Other ability-related files]\r\n\u2502   \u2502\r\n\u2502   \u251c\u2500\u2500 Interaction/            # Player or world interaction system\r\n\u2502   \u2502   \u251c\u2500\u2500 InteractionSystem \r\n\u2502   \u2502   \u251c\u2500\u2500 InteractionComponents\r\n\u2502   \u2502   \u251c\u2500\u2500 InteractionEnums \r\n\u2502   \u2502   \u251c\u2500\u2500 InteractionStructs \r\n\u2502   \u2502   \u251c\u2500\u2500 InteractionInterfaces\r\n\u2502   \u2502   \u2514\u2500\u2500 [Other interaction files]\r\n\u2502   \u2502\r\n\u2502   \u2514\u2500\u2500 [Other systems\u2026]\r\n\u2502\r\n\u251c\u2500\u2500 UI/\r\n\u2502   \u251c\u2500\u2500 Widgets/                # UUserWidget classes\r\n\u2502   \u2514\u2500\u2500 Data/                   # UI-related data assets and enums etc...\r\n\u2502\r\n\u251c\u2500\u2500 Dev/                       # Temporary/testing/experimental code\r\n\u2502   \u2514\u2500\u2500 Sandbox/\r\n\u2502\r\n\u2514\u2500\u2500 YourProject.Build.cs        # Build configuration file\r\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-breakdown",children:"\ud83e\udde0 Breakdown"}),"\n",(0,t.jsx)(n.h3,{id:"core",children:"Core"}),"\n",(0,t.jsxs)(n.p,{children:["Core headers, macros, and logging config. Usually where your precompiled header (",(0,t.jsx)(n.code,{children:"YourProject.h"}),") and main module file (",(0,t.jsx)(n.code,{children:"YourProject.cpp"}),") live.\r\nContains utilities and helper functions common across your entire project."]}),"\n",(0,t.jsx)(n.h3,{id:"game",children:"Game"}),"\n",(0,t.jsxs)(n.p,{children:["All player-related gameplay logic \u2014 ",(0,t.jsx)(n.code,{children:"GameMode"}),", ",(0,t.jsx)(n.code,{children:"GameState"}),", ",(0,t.jsx)(n.code,{children:"HUD"}),"s, and player-specific logic like characters or controllers.\r\nHandles gameplay flow, rules, and player input management."]}),"\n",(0,t.jsx)(n.h3,{id:"systems",children:"Systems"}),"\n",(0,t.jsx)(n.p,{children:"Self-contained gameplay systems that encapsulate specific game mechanics. Designed to be modular for reuse or plugin conversion."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Inventory\r\nImplements all inventory-related features: core systems, components for inventory management, enums for item types or states, data structures for item definitions, UDataAssets for configurable data, and interfaces for interaction contracts."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Abilities\r\nManages gameplay abilities including the ability system core, ability-related components, enums, structs, data assets, and interfaces to define ability behaviors and effects."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Interaction\r\nHandles player or world interaction systems: interaction logic, components, enums to define interaction types, data structs, and interfaces to implement consistent interaction contracts."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Other systems\r\nAdd more gameplay systems as needed, following the same modular structure."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ui",children:"UI"}),"\n",(0,t.jsxs)(n.p,{children:["Contains your ",(0,t.jsx)(n.code,{children:"UUserWidget"})," C++ classes and any supporting UI logic or data (e.g. data tables, UI enums)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Widgets:"})," All UUserWidget subclasses for HUD elements, menus, and UI components."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data:"})," UI-related data assets, enums, and supporting structures."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dev",children:"Dev"}),"\n",(0,t.jsx)(n.p,{children:"Temporary or experimental code and sandbox tests. Useful for prototyping and development without affecting production code. Should be excluded from shipping builds."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-naming-conventions",children:"\u270d\ufe0f Naming Conventions"}),"\n",(0,t.jsx)(n.p,{children:"Stick to Unreal\u2019s coding standards but you can adopt slight variations for clarity:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Classes:"})," ",(0,t.jsx)(n.code,{children:"U"}),", ",(0,t.jsx)(n.code,{children:"A"}),", ",(0,t.jsx)(n.code,{children:"F"}),", ",(0,t.jsx)(n.code,{children:"I"})," prefixes (e.g. ",(0,t.jsx)(n.code,{children:"UUserWidget"}),", ",(0,t.jsx)(n.code,{children:"AEnemy"}),", ",(0,t.jsx)(n.code,{children:"FItemData"}),", ",(0,t.jsx)(n.code,{children:"IInteractable"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Components:"})," ",(0,t.jsx)(n.code,{children:"UYourProject[Name]Component"})," (e.g. ",(0,t.jsx)(n.code,{children:"UYourProjectHealthComponent"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Systems:"})," Folder-level prefixes like ",(0,t.jsx)(n.code,{children:"Inventory/"}),", ",(0,t.jsx)(n.code,{children:"Abilities/"}),", etc."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log Categories:"})," Use a centralized ",(0,t.jsx)(n.code,{children:"LogChannels.h"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"1 class per file:"})," Avoid multiple classes in one file unless nested or private."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Minimal header includes:"})," Use forward declarations where possible."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature folder plugins:"})," For even better separation, migrate systems into ",(0,t.jsx)(n.a,{href:"https://docs.unrealengine.com/en-US/creating-and-managing-plugins-in-unreal-engine/",children:"feature plugins"})," over time."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid circular dependencies:"})," Especially between systems \u2014 use interfaces or weak references."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"A clean C++ folder structure reduces confusion, speeds up compile times, and helps new developers (or future you) navigate the codebase with confidence."}),"\n",(0,t.jsx)(n.p,{children:"Got your own folder strategy or engine module setup? Share it in the comments!"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},8046:e=>{e.exports=JSON.parse('{"permalink":"/imnazake/blog/unreal-cpp-folder-structure","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-01-ide-folder-structure.md","source":"@site/blog/2025-01-01-ide-folder-structure.md","title":"Clean Folder Structure (IDE)","description":"A scalable C++ source folder structure for Unreal Engine that supports both solo and team development workflows.","date":"2025-01-01T00:00:00.000Z","tags":[{"inline":false,"label":"UnrealEngine","permalink":"/imnazake/blog/tags/ue","description":"Unreal Engine"},{"inline":false,"label":"IDE","permalink":"/imnazake/blog/tags/ide","description":"IDE"},{"inline":false,"label":"Structure","permalink":"/imnazake/blog/tags/structure","description":"Structure"},{"inline":false,"label":"C++","permalink":"/imnazake/blog/tags/cpp","description":"C++"}],"readingTime":3.47,"hasTruncateMarker":false,"authors":[{"name":"Nazake","title":"Game Developer","url":"https://github.com/imnazake","page":{"permalink":"/imnazake/blog/authors/nazake"},"socials":{"x":"https://x.com/imnazake","github":"https://github.com/imnazake"},"imageURL":"https://github.com/imnazake.png","key":"nazake"}],"frontMatter":{"title":"Clean Folder Structure (IDE)","description":"A scalable C++ source folder structure for Unreal Engine that supports both solo and team development workflows.","authors":"nazake","tags":["ue","ide","structure","c++"],"slug":"unreal-cpp-folder-structure","date":"2025-01-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Clean Folder Structure (Editor)","permalink":"/imnazake/blog/unreal-editor-folder-structure"}}')}}]);